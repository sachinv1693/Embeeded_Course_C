

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed Feb  5 17:49:33 2020

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           	psect	idataCOMRAM
    26  000A4A                     __pidataCOMRAM:
    27                           	opt stack 0
    28                           
    29                           ;initializer for _selected_index
    30  000A4A  0009               	dw	9
    31                           
    32                           ;initializer for _display
    33  000A4C  01                 	db	1
    34                           
    35                           ;initializer for read_switches@once
    36  000A4D  01                 	db	1
    37                           
    38                           ;initializer for _count_str
    39  000A4E  30                 	db	48
    40  000A4F  30                 	db	48
    41  000A50  30                 	db	48
    42  000A51  30                 	db	48
    43  000A52  30                 	db	48
    44  000A53  30                 	db	48
    45  000A54  30                 	db	48
    46  000A55  30                 	db	48
    47  000A56  30                 	db	48
    48  000A57  30                 	db	48
    49  000A58  00                 	db	0
    50  0000                     _ADCON1	set	4033
    51  0000                     _PORTB	set	3969
    52  0000                     _PORTBbits	set	3969
    53  0000                     _PORTCbits	set	3970
    54  0000                     _PORTD	set	3971
    55  0000                     _PORTDbits	set	3971
    56  0000                     _TRISB	set	3987
    57  0000                     _TRISC	set	3988
    58  0000                     _TRISD	set	3989
    59  0000                     _RBPU	set	32655
    60  0000                     _TRISD7	set	31919
    61                           
    62                           	psect	smallconst
    63  000600                     __psmallconst:
    64                           	opt stack 0
    65  000600  00                 	db	0
    66  000601                     STR_1:
    67  000601  43                 	db	67	;'C'
    68  000602  4F                 	db	79	;'O'
    69  000603  55                 	db	85	;'U'
    70  000604  4E                 	db	78	;'N'
    71  000605  54                 	db	84	;'T'
    72  000606  49                 	db	73	;'I'
    73  000607  4E                 	db	78	;'N'
    74  000608  47                 	db	71	;'G'
    75  000609  20                 	db	32
    76  00060A  44                 	db	68	;'D'
    77  00060B  49                 	db	73	;'I'
    78  00060C  53                 	db	83	;'S'
    79  00060D  50                 	db	80	;'P'
    80  00060E  4C                 	db	76	;'L'
    81  00060F  41                 	db	65	;'A'
    82  000610  59                 	db	89	;'Y'
    83  000611  00                 	db	0
    84  000612                     STR_2:
    85  000612  4D                 	db	77	;'M'
    86  000613  4F                 	db	79	;'O'
    87  000614  44                 	db	68	;'D'
    88  000615  49                 	db	73	;'I'
    89  000616  46                 	db	70	;'F'
    90  000617  59                 	db	89	;'Y'
    91  000618  20                 	db	32
    92  000619  43                 	db	67	;'C'
    93  00061A  4F                 	db	79	;'O'
    94  00061B  55                 	db	85	;'U'
    95  00061C  4E                 	db	78	;'N'
    96  00061D  54                 	db	84	;'T'
    97  00061E  00                 	db	0
    98  00061F  00                 	db	0	; dummy byte at the end
    99  0000                     
   100                           ; #config settings
   101                           
   102                           	psect	cinit
   103  00098C                     __pcinit:
   104                           	opt stack 0
   105  00098C                     start_initialization:
   106                           	opt stack 0
   107  00098C                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Clear objects allocated to COMRAM (6 bytes)
   111  00098C  6A21               	clrf	(__pbssCOMRAM+5)& (0+255),c
   112  00098E  6A20               	clrf	(__pbssCOMRAM+4)& (0+255),c
   113  000990  6A1F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   114  000992  6A1E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   115  000994  6A1D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   116  000996  6A1C               	clrf	__pbssCOMRAM& (0+255),c
   117                           
   118                           ; Initialize objects allocated to COMRAM (15 bytes)
   119                           ; load TBLPTR registers with __pidataCOMRAM
   120  000998  0E4A               	movlw	low __pidataCOMRAM
   121  00099A  6EF6               	movwf	tblptrl,c
   122  00099C  0E0A               	movlw	high __pidataCOMRAM
   123  00099E  6EF7               	movwf	tblptrh,c
   124  0009A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   125  0009A2  6EF8               	movwf	tblptru,c
   126  0009A4  EE00  F001         	lfsr	0,__pdataCOMRAM
   127  0009A8  EE10 F00F          	lfsr	1,15
   128  0009AC                     copy_data0:
   129  0009AC  0009               	tblrd		*+
   130  0009AE  CFF5 FFEE          	movff	tablat,postinc0
   131  0009B2  50E5               	movf	postdec1,w,c
   132  0009B4  50E1               	movf	fsr1l,w,c
   133  0009B6  E1FA               	bnz	copy_data0
   134  0009B8                     end_of_initialization:
   135                           	opt stack 0
   136  0009B8                     __end_of__initialization:
   137                           	opt stack 0
   138  0009B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   139  0009BA  6EF8               	movwf	tblptru,c
   140  0009BC  0100               	movlb	0
   141  0009BE  EF10  F003         	goto	_main	;jump to C main() function
   142                           tblptru	equ	0xFF8
   143                           tblptrh	equ	0xFF7
   144                           tblptrl	equ	0xFF6
   145                           tablat	equ	0xFF5
   146                           postinc0	equ	0xFEE
   147                           postdec1	equ	0xFE5
   148                           fsr1l	equ	0xFE1
   149                           
   150                           	psect	bssCOMRAM
   151  00001C                     __pbssCOMRAM:
   152                           	opt stack 0
   153  00001C                     _wait:
   154                           	opt stack 0
   155  00001C                     	ds	2
   156  00001E                     _count_overflow:
   157                           	opt stack 0
   158  00001E                     	ds	1
   159  00001F                     _delay:
   160                           	opt stack 0
   161  00001F                     	ds	1
   162  000020                     read_switches@key:
   163                           	opt stack 0
   164  000020                     	ds	1
   165  000021                     read_switches@key_state:
   166                           	opt stack 0
   167  000021                     	ds	1
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           postinc0	equ	0xFEE
   173                           postdec1	equ	0xFE5
   174                           fsr1l	equ	0xFE1
   175                           
   176                           	psect	dataCOMRAM
   177  000001                     __pdataCOMRAM:
   178                           	opt stack 0
   179  000001                     _selected_index:
   180                           	opt stack 0
   181  000001                     	ds	2
   182  000003                     _display:
   183                           	opt stack 0
   184  000003                     	ds	1
   185  000004                     read_switches@once:
   186                           	opt stack 0
   187  000004                     	ds	1
   188  000005                     _count_str:
   189                           	opt stack 0
   190  000005                     	ds	11
   191                           tblptru	equ	0xFF8
   192                           tblptrh	equ	0xFF7
   193                           tblptrl	equ	0xFF6
   194                           tablat	equ	0xFF5
   195                           postinc0	equ	0xFEE
   196                           postdec1	equ	0xFE5
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	cstackCOMRAM
   200  000010                     __pcstackCOMRAM:
   201                           	opt stack 0
   202  000010                     ?___awmod:
   203                           	opt stack 0
   204  000010                     clcd_write@control_bit:
   205                           	opt stack 0
   206  000010                     read_switches@detection_type:
   207                           	opt stack 0
   208  000010                     ___awmod@dividend:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x0
   212  000010                     	ds	1
   213  000011                     clcd_write@byte:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x1
   217  000011                     	ds	1
   218  000012                     clcd_putch@addr:
   219                           	opt stack 0
   220  000012                     clcd_print@data:
   221                           	opt stack 0
   222  000012                     ___awmod@divisor:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x2
   226  000012                     	ds	1
   227  000013                     clcd_putch@data:
   228                           	opt stack 0
   229  000013                     check_matrix_keypad@i:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x3
   233  000013                     	ds	1
   234  000014                     clcd_print@addr:
   235                           	opt stack 0
   236  000014                     ___awmod@counter:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x4
   240  000014                     	ds	1
   241  000015                     check_matrix_keypad@key:
   242                           	opt stack 0
   243  000015                     ___awmod@sign:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x5
   247  000015                     	ds	1
   248  000016                     ??_main:
   249                           
   250                           ; 1 bytes @ 0x6
   251  000016                     	ds	4
   252  00001A                     main@i:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0xA
   256  00001A                     	ds	2
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           postdec1	equ	0xFE5
   263                           fsr1l	equ	0xFE1
   264                           
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 50 in file "main.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  i               2   10[COMRAM] short 
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : 0/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   284 ;;      Params:         0       0       0       0       0       0       0
   285 ;;      Locals:         2       0       0       0       0       0       0
   286 ;;      Temps:          4       0       0       0       0       0       0
   287 ;;      Totals:         6       0       0       0       0       0       0
   288 ;;Total ram usage:        6 bytes
   289 ;; Hardware stack levels required when called:    3
   290 ;; This function calls:
   291 ;;		___awmod
   292 ;;		_check_matrix_keypad
   293 ;;		_clcd_print
   294 ;;		_clcd_putch
   295 ;;		_init_config
   296 ;; This function is called by:
   297 ;;		Startup code after reset
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text0
   302  000620                     __ptext0:
   303                           	opt stack 0
   304  000620                     _main:
   305                           	opt stack 28
   306                           
   307                           ;main.c: 53: init_config();
   308                           
   309                           ;incstack = 0
   310  000620  EC2D  F005         	call	_init_config	;wreg free
   311  000624                     l1147:
   312                           
   313                           ;main.c: 55: {
   314                           ;main.c: 57: if (display == 1)
   315  000624  0403               	decf	_display,w,c
   316  000626  A4D8               	btfss	status,2,c
   317  000628  D055               	goto	l1179
   318                           
   319                           ;main.c: 58: {
   320                           ;main.c: 60: if (delay++ == 20 && ++count_str[9] > '9')
   321  00062A  2A1F               	incf	_delay,f,c
   322  00062C  0E15               	movlw	21
   323  00062E  181F               	xorwf	_delay,w,c
   324  000630  A4D8               	btfss	status,2,c
   325  000632  D008               	goto	l129
   326  000634  2A0E               	incf	_count_str+9,f,c
   327  000636  0E39               	movlw	57
   328  000638  640E               	cpfsgt	_count_str+9,c
   329  00063A  D004               	goto	l129
   330                           
   331                           ;main.c: 61: {
   332                           ;main.c: 63: count_overflow = 1;
   333  00063C  0E01               	movlw	1
   334  00063E  6E1E               	movwf	_count_overflow,c
   335                           
   336                           ;main.c: 65: delay = 0;
   337  000640  0E00               	movlw	0
   338  000642  6E1F               	movwf	_delay,c
   339  000644                     l129:
   340                           
   341                           ;main.c: 66: }
   342                           ;main.c: 68: if (count_overflow)
   343  000644  501E               	movf	_count_overflow,w,c
   344  000646  B4D8               	btfsc	status,2,c
   345  000648  D034               	goto	l1175
   346                           
   347                           ;main.c: 69: {
   348                           ;main.c: 71: for (short i = 9; i >= 0; i--)
   349  00064A  0E00               	movlw	0
   350  00064C  6E1B               	movwf	main@i+1,c
   351  00064E  0E09               	movlw	9
   352  000650  6E1A               	movwf	main@i,c
   353  000652                     l1157:
   354  000652  BE1B               	btfsc	main@i+1,7,c
   355  000654  D02C               	goto	l1173
   356                           
   357                           ;main.c: 72: {
   358                           ;main.c: 74: if (count_str[i] > '9')
   359  000656  0E05               	movlw	low _count_str
   360  000658  241A               	addwf	main@i,w,c
   361  00065A  6ED9               	movwf	fsr2l,c
   362  00065C  0E00               	movlw	high _count_str
   363  00065E  201B               	addwfc	main@i+1,w,c
   364  000660  6EDA               	movwf	fsr2h,c
   365  000662  0E39               	movlw	57
   366  000664  64DF               	cpfsgt	indf2,c
   367  000666  D023               	goto	l1173
   368                           
   369                           ;main.c: 75: {
   370                           ;main.c: 76: count_str[i] = '0';
   371  000668  0E05               	movlw	low _count_str
   372  00066A  241A               	addwf	main@i,w,c
   373  00066C  6ED9               	movwf	fsr2l,c
   374  00066E  0E00               	movlw	high _count_str
   375  000670  201B               	addwfc	main@i+1,w,c
   376  000672  6EDA               	movwf	fsr2h,c
   377  000674  0E30               	movlw	48
   378  000676  6EDF               	movwf	indf2,c
   379                           
   380                           ;main.c: 77: if (i)
   381  000678  501A               	movf	main@i,w,c
   382  00067A  101B               	iorwf	main@i+1,w,c
   383  00067C  B4D8               	btfsc	status,2,c
   384  00067E  D013               	goto	l1169
   385                           
   386                           ;main.c: 78: count_str[i - 1] += 1;
   387  000680  0EFF               	movlw	255
   388  000682  6E16               	movwf	??_main& (0+255),c
   389  000684  0EFF               	movlw	255
   390  000686  6E17               	movwf	(??_main+1)& (0+255),c
   391  000688  C01A  F018         	movff	main@i,??_main+2
   392  00068C  C01B  F019         	movff	main@i+1,??_main+3
   393  000690  5016               	movf	??_main,w,c
   394  000692  2618               	addwf	??_main+2,f,c
   395  000694  5017               	movf	??_main+1,w,c
   396  000696  2219               	addwfc	??_main+3,f,c
   397  000698  0E05               	movlw	low _count_str
   398  00069A  2418               	addwf	??_main+2,w,c
   399  00069C  6ED9               	movwf	fsr2l,c
   400  00069E  0E00               	movlw	high _count_str
   401  0006A0  2019               	addwfc	??_main+3,w,c
   402  0006A2  6EDA               	movwf	fsr2h,c
   403  0006A4  2ADF               	incf	indf2,f,c
   404  0006A6                     l1169:
   405  0006A6  061A               	decf	main@i,f,c
   406  0006A8  A0D8               	btfss	status,0,c
   407  0006AA  061B               	decf	main@i+1,f,c
   408  0006AC  D7D2               	goto	l1157
   409  0006AE                     l1173:
   410                           
   411                           ;main.c: 83: }
   412                           ;main.c: 85: count_overflow = 0;
   413  0006AE  0E00               	movlw	0
   414  0006B0  6E1E               	movwf	_count_overflow,c
   415  0006B2                     l1175:
   416                           
   417                           ;main.c: 86: }
   418                           ;main.c: 87: clcd_print("COUNTING DISPLAY", (0x80 + (0)));
   419  0006B2  0E01               	movlw	low STR_1
   420  0006B4  6E12               	movwf	clcd_print@data,c
   421  0006B6  0E06               	movlw	high STR_1
   422  0006B8  6E13               	movwf	clcd_print@data+1,c
   423  0006BA  0E80               	movlw	128
   424  0006BC  6E14               	movwf	clcd_print@addr,c
   425  0006BE  EC75  F004         	call	_clcd_print	;wreg free
   426                           
   427                           ;main.c: 88: clcd_print(count_str, (0xC0 + (3)));
   428  0006C2  0E05               	movlw	low _count_str
   429  0006C4  6E12               	movwf	clcd_print@data,c
   430  0006C6  0E00               	movlw	high _count_str
   431  0006C8  6E13               	movwf	clcd_print@data+1,c
   432  0006CA  0EC3               	movlw	195
   433  0006CC  6E14               	movwf	clcd_print@addr,c
   434  0006CE  EC75  F004         	call	_clcd_print	;wreg free
   435                           
   436                           ;main.c: 90: }
   437  0006D2  D02F               	goto	l1189
   438  0006D4                     l1179:
   439                           
   440                           ;main.c: 92: else
   441                           ;main.c: 93: {
   442                           ;main.c: 95: clcd_print("MODIFY COUNT", (0x80 + (2)));
   443  0006D4  0E12               	movlw	low STR_2
   444  0006D6  6E12               	movwf	clcd_print@data,c
   445  0006D8  0E06               	movlw	high STR_2
   446  0006DA  6E13               	movwf	clcd_print@data+1,c
   447  0006DC  0E82               	movlw	130
   448  0006DE  6E14               	movwf	clcd_print@addr,c
   449  0006E0  EC75  F004         	call	_clcd_print	;wreg free
   450                           
   451                           ;main.c: 96: wait = (wait + 1) % 500;
   452  0006E4  0E01               	movlw	1
   453  0006E6  241C               	addwf	_wait,w,c
   454  0006E8  6E10               	movwf	___awmod@dividend,c
   455  0006EA  0E00               	movlw	0
   456  0006EC  201D               	addwfc	_wait+1,w,c
   457  0006EE  6E11               	movwf	___awmod@dividend+1,c
   458  0006F0  0E01               	movlw	1
   459  0006F2  6E13               	movwf	___awmod@divisor+1,c
   460  0006F4  0EF4               	movlw	244
   461  0006F6  6E12               	movwf	___awmod@divisor,c
   462  0006F8  EC3D  F004         	call	___awmod	;wreg free
   463  0006FC  C010  F01C         	movff	?___awmod,_wait
   464  000700  C011  F01D         	movff	?___awmod+1,_wait+1
   465                           
   466                           ;main.c: 97: if (wait < 250)
   467  000704  BE1D               	btfsc	_wait+1,7,c
   468  000706  D006               	goto	l1185
   469  000708  501D               	movf	_wait+1,w,c
   470  00070A  E10D               	bnz	l1187
   471  00070C  0EFA               	movlw	250
   472  00070E  5C1C               	subwf	_wait,w,c
   473  000710  B0D8               	btfsc	status,0,c
   474  000712  D009               	goto	l1187
   475  000714                     l1185:
   476                           
   477                           ;main.c: 98: clcd_print(count_str, (0xC0 + (3)));
   478  000714  0E05               	movlw	low _count_str
   479  000716  6E12               	movwf	clcd_print@data,c
   480  000718  0E00               	movlw	high _count_str
   481  00071A  6E13               	movwf	clcd_print@data+1,c
   482  00071C  0EC3               	movlw	195
   483  00071E  6E14               	movwf	clcd_print@addr,c
   484  000720  EC75  F004         	call	_clcd_print	;wreg free
   485  000724  D006               	goto	l1189
   486  000726                     l1187:
   487                           
   488                           ;main.c: 99: else
   489                           ;main.c: 100: {
   490                           ;main.c: 101: clcd_putch(' ', (0xC0 + (3 + selected_index)));
   491  000726  5001               	movf	_selected_index,w,c
   492  000728  0FC3               	addlw	195
   493  00072A  6E12               	movwf	clcd_putch@addr,c
   494  00072C  0E20               	movlw	32
   495  00072E  EC10  F005         	call	_clcd_putch
   496  000732                     l1189:
   497                           
   498                           ;main.c: 103: }
   499                           ;main.c: 104: }
   500                           ;main.c: 106: check_matrix_keypad();
   501  000732  EC9C  F003         	call	_check_matrix_keypad	;wreg free
   502  000736  D776               	goto	l1147
   503  000738                     __end_of_main:
   504                           	opt stack 0
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           postdec1	equ	0xFE5
   511                           fsr1l	equ	0xFE1
   512                           indf2	equ	0xFDF
   513                           fsr2h	equ	0xFDA
   514                           fsr2l	equ	0xFD9
   515                           status	equ	0xFD8
   516                           
   517 ;; *************** function _init_config *****************
   518 ;; Defined at:
   519 ;;		line 10 in file "main.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, status,2, status,0, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   533 ;;      Params:         0       0       0       0       0       0       0
   534 ;;      Locals:         0       0       0       0       0       0       0
   535 ;;      Temps:          0       0       0       0       0       0       0
   536 ;;      Totals:         0       0       0       0       0       0       0
   537 ;;Total ram usage:        0 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    2
   540 ;; This function calls:
   541 ;;		_init_clcd
   542 ;;		_init_matrix_keypad
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text1
   549  000A5A                     __ptext1:
   550                           	opt stack 0
   551  000A5A                     _init_config:
   552                           	opt stack 28
   553                           
   554                           ;main.c: 12: init_clcd();
   555                           
   556                           ;incstack = 0
   557  000A5A  ECE1  F004         	call	_init_clcd	;wreg free
   558                           
   559                           ;main.c: 13: init_matrix_keypad();
   560  000A5E  EC1C  F005         	call	_init_matrix_keypad	;wreg free
   561  000A62  0012               	return		;funcret
   562  000A64                     __end_of_init_config:
   563                           	opt stack 0
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           indf2	equ	0xFDF
   572                           fsr2h	equ	0xFDA
   573                           fsr2l	equ	0xFD9
   574                           status	equ	0xFD8
   575                           
   576 ;; *************** function _init_matrix_keypad *****************
   577 ;; Defined at:
   578 ;;		line 4 in file "matrix_keypad.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   592 ;;      Params:         0       0       0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; This function calls:
   599 ;;		Nothing
   600 ;; This function is called by:
   601 ;;		_init_config
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text2
   606  000A38                     __ptext2:
   607                           	opt stack 0
   608  000A38                     _init_matrix_keypad:
   609                           	opt stack 29
   610                           
   611                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
   612                           
   613                           ;incstack = 0
   614  000A38  0E0F               	movlw	15
   615  000A3A  6EC1               	movwf	4033,c	;volatile
   616                           
   617                           ;matrix_keypad.c: 10: TRISB = 0x1E;
   618  000A3C  0E1E               	movlw	30
   619  000A3E  6E93               	movwf	3987,c	;volatile
   620                           
   621                           ;matrix_keypad.c: 13: RBPU = 0;
   622  000A40  9EF1               	bcf	intcon2,7,c	;volatile
   623                           
   624                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
   625  000A42  5081               	movf	3969,w,c	;volatile
   626  000A44  09E0               	iorlw	224
   627  000A46  6E81               	movwf	3969,c	;volatile
   628  000A48  0012               	return		;funcret
   629  000A4A                     __end_of_init_matrix_keypad:
   630                           	opt stack 0
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           intcon2	equ	0xFF1
   636                           postinc0	equ	0xFEE
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           indf2	equ	0xFDF
   640                           fsr2h	equ	0xFDA
   641                           fsr2l	equ	0xFD9
   642                           status	equ	0xFD8
   643                           
   644 ;; *************** function _init_clcd *****************
   645 ;; Defined at:
   646 ;;		line 26 in file "clcd.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   660 ;;      Params:         0       0       0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0
   663 ;;      Totals:         0       0       0       0       0       0       0
   664 ;;Total ram usage:        0 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; Hardware stack levels required when called:    1
   667 ;; This function calls:
   668 ;;		_clcd_write
   669 ;; This function is called by:
   670 ;;		_init_config
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text3
   675  0009C2                     __ptext3:
   676                           	opt stack 0
   677  0009C2                     _init_clcd:
   678                           	opt stack 28
   679                           
   680                           ;clcd.c: 29: TRISD = 0x00;
   681                           
   682                           ;incstack = 0
   683  0009C2  0E00               	movlw	0
   684  0009C4  6E95               	movwf	3989,c	;volatile
   685                           
   686                           ;clcd.c: 31: TRISC = TRISC & 0xF8;
   687  0009C6  5094               	movf	3988,w,c	;volatile
   688  0009C8  0BF8               	andlw	248
   689  0009CA  6E94               	movwf	3988,c	;volatile
   690                           
   691                           ;clcd.c: 33: PORTCbits.RC0 = 0;
   692  0009CC  9082               	bcf	3970,0,c	;volatile
   693                           
   694                           ;clcd.c: 35: clcd_write(0x02, 0);
   695  0009CE  0E00               	movlw	0
   696  0009D0  6E10               	movwf	clcd_write@control_bit,c
   697  0009D2  0E02               	movlw	2
   698  0009D4  ECFC  F004         	call	_clcd_write
   699                           
   700                           ;clcd.c: 36: clcd_write(0x38, 0);
   701  0009D8  0E00               	movlw	0
   702  0009DA  6E10               	movwf	clcd_write@control_bit,c
   703  0009DC  0E38               	movlw	56
   704  0009DE  ECFC  F004         	call	_clcd_write
   705                           
   706                           ;clcd.c: 37: clcd_write(0x0C, 0);
   707  0009E2  0E00               	movlw	0
   708  0009E4  6E10               	movwf	clcd_write@control_bit,c
   709  0009E6  0E0C               	movlw	12
   710  0009E8  ECFC  F004         	call	_clcd_write
   711                           
   712                           ;clcd.c: 38: clcd_write(0x01, 0);
   713  0009EC  0E00               	movlw	0
   714  0009EE  6E10               	movwf	clcd_write@control_bit,c
   715  0009F0  0E01               	movlw	1
   716  0009F2  ECFC  F004         	call	_clcd_write
   717  0009F6  0012               	return		;funcret
   718  0009F8                     __end_of_init_clcd:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           intcon2	equ	0xFF1
   725                           postinc0	equ	0xFEE
   726                           postdec1	equ	0xFE5
   727                           fsr1l	equ	0xFE1
   728                           indf2	equ	0xFDF
   729                           fsr2h	equ	0xFDA
   730                           fsr2l	equ	0xFD9
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _clcd_putch *****************
   734 ;; Defined at:
   735 ;;		line 50 in file "clcd.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  data            1    wreg     const unsigned char 
   738 ;;  addr            1    2[COMRAM] unsigned char 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  data            1    3[COMRAM] const unsigned char 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, status,2, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   750 ;;      Params:         1       0       0       0       0       0       0
   751 ;;      Locals:         1       0       0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0
   753 ;;      Totals:         2       0       0       0       0       0       0
   754 ;;Total ram usage:        2 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; Hardware stack levels required when called:    1
   757 ;; This function calls:
   758 ;;		_clcd_write
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text4
   765  000A20                     __ptext4:
   766                           	opt stack 0
   767  000A20                     _clcd_putch:
   768                           	opt stack 29
   769                           
   770                           ;incstack = 0
   771                           ;clcd_putch@data stored from wreg
   772  000A20  6E13               	movwf	clcd_putch@data,c
   773                           
   774                           ;clcd.c: 52: clcd_write(addr, 0);
   775  000A22  0E00               	movlw	0
   776  000A24  6E10               	movwf	clcd_write@control_bit,c
   777  000A26  5012               	movf	clcd_putch@addr,w,c
   778  000A28  ECFC  F004         	call	_clcd_write
   779                           
   780                           ;clcd.c: 53: clcd_write(data, 1);
   781  000A2C  0E01               	movlw	1
   782  000A2E  6E10               	movwf	clcd_write@control_bit,c
   783  000A30  5013               	movf	clcd_putch@data,w,c
   784  000A32  ECFC  F004         	call	_clcd_write
   785  000A36  0012               	return		;funcret
   786  000A38                     __end_of_clcd_putch:
   787                           	opt stack 0
   788                           tblptru	equ	0xFF8
   789                           tblptrh	equ	0xFF7
   790                           tblptrl	equ	0xFF6
   791                           tablat	equ	0xFF5
   792                           intcon2	equ	0xFF1
   793                           postinc0	equ	0xFEE
   794                           postdec1	equ	0xFE5
   795                           fsr1l	equ	0xFE1
   796                           indf2	equ	0xFDF
   797                           fsr2h	equ	0xFDA
   798                           fsr2l	equ	0xFD9
   799                           status	equ	0xFD8
   800                           
   801 ;; *************** function _clcd_print *****************
   802 ;; Defined at:
   803 ;;		line 41 in file "clcd.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  data            2    2[COMRAM] PTR const unsigned char 
   806 ;;		 -> STR_2(13), STR_1(17), count_str(11), 
   807 ;;  addr            1    4[COMRAM] unsigned char 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   819 ;;      Params:         3       0       0       0       0       0       0
   820 ;;      Locals:         0       0       0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0
   822 ;;      Totals:         3       0       0       0       0       0       0
   823 ;;Total ram usage:        3 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		_clcd_write
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text5
   834  0008EA                     __ptext5:
   835                           	opt stack 0
   836  0008EA                     _clcd_print:
   837                           	opt stack 29
   838                           
   839                           ;clcd.c: 43: clcd_write(addr, 0);
   840                           
   841                           ;incstack = 0
   842  0008EA  0E00               	movlw	0
   843  0008EC  6E10               	movwf	clcd_write@control_bit,c
   844  0008EE  5014               	movf	clcd_print@addr,w,c
   845  0008F0  ECFC  F004         	call	_clcd_write
   846                           
   847                           ;clcd.c: 44: while (*data != '\0')
   848  0008F4  D016               	goto	l1067
   849  0008F6                     l1063:
   850                           
   851                           ;clcd.c: 45: {
   852                           ;clcd.c: 46: clcd_write(*data++, 1);
   853  0008F6  0E01               	movlw	1
   854  0008F8  6E10               	movwf	clcd_write@control_bit,c
   855  0008FA  C012  FFF6         	movff	clcd_print@data,tblptrl
   856  0008FE  C013  FFF7         	movff	clcd_print@data+1,tblptrh
   857  000902  6AF8               	clrf	tblptru,c
   858  000904  0E05               	movlw	(high __ramtop+-1)
   859  000906  64F7               	cpfsgt	tblptrh,c
   860  000908  D003               	bra	u537
   861  00090A  0008               	tblrd		*
   862  00090C  50F5               	movf	tablat,w,c
   863  00090E  D005               	bra	u530
   864  000910                     u537:
   865  000910  CFF6 FFE9          	movff	tblptrl,fsr0l
   866  000914  CFF7 FFEA          	movff	tblptrh,fsr0h
   867  000918  50EF               	movf	indf0,w,c
   868  00091A                     u530:
   869  00091A  ECFC  F004         	call	_clcd_write
   870  00091E  4A12               	infsnz	clcd_print@data,f,c
   871  000920  2A13               	incf	clcd_print@data+1,f,c
   872  000922                     l1067:
   873  000922  C012  FFF6         	movff	clcd_print@data,tblptrl
   874  000926  C013  FFF7         	movff	clcd_print@data+1,tblptrh
   875  00092A  6AF8               	clrf	tblptru,c
   876  00092C  0E05               	movlw	(high __ramtop+-1)
   877  00092E  64F7               	cpfsgt	tblptrh,c
   878  000930  D003               	bra	u547
   879  000932  0008               	tblrd		*
   880  000934  50F5               	movf	tablat,w,c
   881  000936  D005               	bra	u540
   882  000938                     u547:
   883  000938  CFF6 FFE9          	movff	tblptrl,fsr0l
   884  00093C  CFF7 FFEA          	movff	tblptrh,fsr0h
   885  000940  50EF               	movf	indf0,w,c
   886  000942                     u540:
   887  000942  0900               	iorlw	0
   888  000944  B4D8               	btfsc	status,2,c
   889  000946  0012               	return	
   890  000948  D7D6               	goto	l1063
   891  00094A                     __end_of_clcd_print:
   892                           	opt stack 0
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           intcon2	equ	0xFF1
   898                           indf0	equ	0xFEF
   899                           postinc0	equ	0xFEE
   900                           fsr0h	equ	0xFEA
   901                           fsr0l	equ	0xFE9
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           indf2	equ	0xFDF
   905                           fsr2h	equ	0xFDA
   906                           fsr2l	equ	0xFD9
   907                           status	equ	0xFD8
   908                           
   909 ;; *************** function _check_matrix_keypad *****************
   910 ;; Defined at:
   911 ;;		line 17 in file "main.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  i               2    3[COMRAM] unsigned short 
   916 ;;  key             1    5[COMRAM] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   926 ;;      Params:         0       0       0       0       0       0       0
   927 ;;      Locals:         3       0       0       0       0       0       0
   928 ;;      Temps:          1       0       0       0       0       0       0
   929 ;;      Totals:         4       0       0       0       0       0       0
   930 ;;Total ram usage:        4 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		_clcd_write
   935 ;;		_read_switches
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text6
   942  000738                     __ptext6:
   943                           	opt stack 0
   944  000738                     _check_matrix_keypad:
   945                           	opt stack 28
   946                           
   947                           ;main.c: 19: unsigned char key = read_switches(1);
   948                           
   949                           ;incstack = 0
   950  000738  0E01               	movlw	1
   951  00073A  ECA5  F004         	call	_read_switches
   952  00073E  6E15               	movwf	check_matrix_keypad@key,c
   953                           
   954                           ;main.c: 20: for (unsigned short i = 50; i--;);
   955  000740  0E00               	movlw	0
   956  000742  6E14               	movwf	check_matrix_keypad@i+1,c
   957  000744  0E32               	movlw	50
   958  000746  6E13               	movwf	check_matrix_keypad@i,c
   959  000748                     l1077:
   960  000748  0613               	decf	check_matrix_keypad@i,f,c
   961  00074A  A0D8               	btfss	status,0,c
   962  00074C  0614               	decf	check_matrix_keypad@i+1,f,c
   963  00074E  2813               	incf	check_matrix_keypad@i,w,c
   964  000750  E1FB               	bnz	l1077
   965  000752  2814               	incf	check_matrix_keypad@i+1,w,c
   966  000754  A4D8               	btfss	status,2,c
   967  000756  D7F8               	goto	l1077
   968                           
   969                           ;main.c: 22: if (key == 1)
   970  000758  0415               	decf	check_matrix_keypad@key,w,c
   971  00075A  A4D8               	btfss	status,2,c
   972  00075C  D00D               	goto	l1085
   973                           
   974                           ;main.c: 23: {
   975                           ;main.c: 24: display = !display;
   976  00075E  5003               	movf	_display,w,c
   977  000760  A4D8               	btfss	status,2,c
   978  000762  D002               	goto	u580
   979  000764  0E01               	movlw	1
   980  000766  D001               	goto	u590
   981  000768                     u580:
   982  000768  0E00               	movlw	0
   983  00076A                     u590:
   984  00076A  6E03               	movwf	_display,c
   985                           
   986                           ;main.c: 25: clcd_write(0x01, 0);
   987  00076C  0E00               	movlw	0
   988  00076E  6E10               	movwf	clcd_write@control_bit,c
   989  000770  0E01               	movlw	1
   990  000772  ECFC  F004         	call	_clcd_write
   991                           
   992                           ;main.c: 26: }
   993  000776  0012               	return	
   994  000778                     l1085:
   995                           
   996                           ;main.c: 28: else if (display == 0 && key == 4)
   997  000778  5003               	movf	_display,w,c
   998  00077A  A4D8               	btfss	status,2,c
   999  00077C  D00E               	goto	l1093
  1000  00077E  0E04               	movlw	4
  1001  000780  1815               	xorwf	check_matrix_keypad@key,w,c
  1002  000782  A4D8               	btfss	status,2,c
  1003  000784  D00A               	goto	l1093
  1004                           
  1005                           ;main.c: 29: {
  1006                           ;main.c: 31: if (--selected_index < 0)
  1007  000786  0601               	decf	_selected_index,f,c
  1008  000788  A0D8               	btfss	status,0,c
  1009  00078A  0602               	decf	_selected_index+1,f,c
  1010  00078C  AE02               	btfss	_selected_index+1,7,c
  1011  00078E  0012               	return	
  1012                           
  1013                           ;main.c: 32: selected_index = 9;
  1014  000790  0E00               	movlw	0
  1015  000792  6E02               	movwf	_selected_index+1,c
  1016  000794  0E09               	movlw	9
  1017  000796  6E01               	movwf	_selected_index,c
  1018                           
  1019                           ;main.c: 33: }
  1020  000798  0012               	return	
  1021  00079A                     l1093:
  1022                           
  1023                           ;main.c: 35: else if (display == 0 && key == 7)
  1024  00079A  5003               	movf	_display,w,c
  1025  00079C  A4D8               	btfss	status,2,c
  1026  00079E  D017               	goto	l1101
  1027  0007A0  0E07               	movlw	7
  1028  0007A2  1815               	xorwf	check_matrix_keypad@key,w,c
  1029  0007A4  A4D8               	btfss	status,2,c
  1030  0007A6  D013               	goto	l1101
  1031                           
  1032                           ;main.c: 36: {
  1033                           ;main.c: 38: if (++count_str[selected_index] > '9')
  1034  0007A8  0E05               	movlw	low _count_str
  1035  0007AA  2401               	addwf	_selected_index,w,c
  1036  0007AC  6ED9               	movwf	fsr2l,c
  1037  0007AE  0E00               	movlw	high _count_str
  1038  0007B0  2002               	addwfc	_selected_index+1,w,c
  1039  0007B2  6EDA               	movwf	fsr2h,c
  1040  0007B4  2ADF               	incf	indf2,f,c
  1041  0007B6  0E39               	movlw	57
  1042  0007B8  64DF               	cpfsgt	indf2,c
  1043  0007BA  0012               	return	
  1044                           
  1045                           ;main.c: 39: count_str[selected_index] = '0';
  1046  0007BC  0E05               	movlw	low _count_str
  1047  0007BE  2401               	addwf	_selected_index,w,c
  1048  0007C0  6ED9               	movwf	fsr2l,c
  1049  0007C2  0E00               	movlw	high _count_str
  1050  0007C4  2002               	addwfc	_selected_index+1,w,c
  1051  0007C6  6EDA               	movwf	fsr2h,c
  1052  0007C8  0E30               	movlw	48
  1053  0007CA  6EDF               	movwf	indf2,c
  1054                           
  1055                           ;main.c: 40: }
  1056  0007CC  0012               	return	
  1057  0007CE                     l1101:
  1058                           
  1059                           ;main.c: 42: else if (display == 0 && key == 10)
  1060  0007CE  5003               	movf	_display,w,c
  1061  0007D0  A4D8               	btfss	status,2,c
  1062  0007D2  0012               	return	
  1063  0007D4  0E0A               	movlw	10
  1064  0007D6  1815               	xorwf	check_matrix_keypad@key,w,c
  1065  0007D8  A4D8               	btfss	status,2,c
  1066  0007DA  0012               	return	
  1067                           
  1068                           ;main.c: 43: {
  1069                           ;main.c: 45: if (--count_str[selected_index] < '0')
  1070  0007DC  0E05               	movlw	low _count_str
  1071  0007DE  2401               	addwf	_selected_index,w,c
  1072  0007E0  6ED9               	movwf	fsr2l,c
  1073  0007E2  0E00               	movlw	high _count_str
  1074  0007E4  2002               	addwfc	_selected_index+1,w,c
  1075  0007E6  6EDA               	movwf	fsr2h,c
  1076  0007E8  06DF               	decf	indf2,f,c
  1077  0007EA  0E30               	movlw	48
  1078  0007EC  60DF               	cpfslt	indf2,c
  1079  0007EE  0012               	return	
  1080                           
  1081                           ;main.c: 46: count_str[selected_index] = '9';
  1082  0007F0  0E05               	movlw	low _count_str
  1083  0007F2  2401               	addwf	_selected_index,w,c
  1084  0007F4  6ED9               	movwf	fsr2l,c
  1085  0007F6  0E00               	movlw	high _count_str
  1086  0007F8  2002               	addwfc	_selected_index+1,w,c
  1087  0007FA  6EDA               	movwf	fsr2h,c
  1088  0007FC  0E39               	movlw	57
  1089  0007FE  6EDF               	movwf	indf2,c
  1090  000800  0012               	return	
  1091  000802                     __end_of_check_matrix_keypad:
  1092                           	opt stack 0
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           intcon2	equ	0xFF1
  1098                           indf0	equ	0xFEF
  1099                           postinc0	equ	0xFEE
  1100                           fsr0h	equ	0xFEA
  1101                           fsr0l	equ	0xFE9
  1102                           postdec1	equ	0xFE5
  1103                           fsr1l	equ	0xFE1
  1104                           indf2	equ	0xFDF
  1105                           fsr2h	equ	0xFDA
  1106                           fsr2l	equ	0xFD9
  1107                           status	equ	0xFD8
  1108                           
  1109 ;; *************** function _read_switches *****************
  1110 ;; Defined at:
  1111 ;;		line 88 in file "matrix_keypad.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  detection_ty    1    wreg     unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  detection_ty    1    0[COMRAM] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      unsigned char 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1125 ;;      Params:         0       0       0       0       0       0       0
  1126 ;;      Locals:         1       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0
  1128 ;;      Totals:         1       0       0       0       0       0       0
  1129 ;;Total ram usage:        1 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    1
  1132 ;; This function calls:
  1133 ;;		_scan_key
  1134 ;; This function is called by:
  1135 ;;		_check_matrix_keypad
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text7
  1140  00094A                     __ptext7:
  1141                           	opt stack 0
  1142  00094A                     _read_switches:
  1143                           	opt stack 28
  1144                           
  1145                           ;incstack = 0
  1146                           ;read_switches@detection_type stored from wreg
  1147  00094A  6E10               	movwf	read_switches@detection_type,c
  1148                           
  1149                           ;matrix_keypad.c: 90: static unsigned char once = 1, key, key_state;
  1150                           ;matrix_keypad.c: 92: if (detection_type == 1)
  1151  00094C  0410               	decf	read_switches@detection_type,w,c
  1152  00094E  A4D8               	btfss	status,2,c
  1153  000950  D015               	goto	l887
  1154                           
  1155                           ;matrix_keypad.c: 93: {
  1156                           ;matrix_keypad.c: 94: key = scan_key();
  1157  000952  EC01  F004         	call	_scan_key	;wreg free
  1158  000956  6E20               	movwf	read_switches@key,c
  1159                           
  1160                           ;matrix_keypad.c: 95: if(key == 0xFF && once)
  1161  000958  2820               	incf	read_switches@key,w,c
  1162  00095A  A4D8               	btfss	status,2,c
  1163  00095C  D007               	goto	l881
  1164  00095E  5004               	movf	read_switches@once,w,c
  1165  000960  B4D8               	btfsc	status,2,c
  1166  000962  D004               	goto	l881
  1167                           
  1168                           ;matrix_keypad.c: 96: {
  1169                           ;matrix_keypad.c: 97: once = 0;
  1170  000964  0E00               	movlw	0
  1171  000966  6E04               	movwf	read_switches@once,c
  1172                           
  1173                           ;matrix_keypad.c: 98: return key_state;
  1174  000968  5021               	movf	read_switches@key_state,w,c
  1175  00096A  0012               	return	
  1176  00096C                     l881:
  1177                           
  1178                           ;matrix_keypad.c: 100: else if(key != 0xFF)
  1179  00096C  2820               	incf	read_switches@key,w,c
  1180  00096E  B4D8               	btfsc	status,2,c
  1181  000970  D00B               	goto	l893
  1182                           
  1183                           ;matrix_keypad.c: 101: {
  1184                           ;matrix_keypad.c: 102: once = 1;
  1185  000972  0E01               	movlw	1
  1186  000974  6E04               	movwf	read_switches@once,c
  1187                           
  1188                           ;matrix_keypad.c: 103: key_state = key;
  1189  000976  C020  F021         	movff	read_switches@key,read_switches@key_state
  1190                           
  1191                           ;matrix_keypad.c: 104: }
  1192                           ;matrix_keypad.c: 105: }
  1193  00097A  D006               	goto	l893
  1194  00097C                     l887:
  1195                           
  1196                           ;matrix_keypad.c: 106: else if (detection_type == 0)
  1197  00097C  5010               	movf	read_switches@detection_type,w,c
  1198  00097E  A4D8               	btfss	status,2,c
  1199  000980  D003               	goto	l893
  1200                           
  1201                           ;matrix_keypad.c: 107: {
  1202                           ;matrix_keypad.c: 108: return scan_key();
  1203  000982  EC01  F004         	call	_scan_key	;wreg free
  1204  000986  0012               	return	
  1205  000988                     l893:
  1206                           
  1207                           ;matrix_keypad.c: 109: }
  1208                           ;matrix_keypad.c: 111: return 0xFF;
  1209  000988  0EFF               	movlw	255
  1210  00098A  0012               	return	
  1211  00098C                     __end_of_read_switches:
  1212                           	opt stack 0
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           intcon2	equ	0xFF1
  1218                           indf0	equ	0xFEF
  1219                           postinc0	equ	0xFEE
  1220                           fsr0h	equ	0xFEA
  1221                           fsr0l	equ	0xFE9
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           fsr2h	equ	0xFDA
  1226                           fsr2l	equ	0xFD9
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _scan_key *****************
  1230 ;; Defined at:
  1231 ;;		line 18 in file "matrix_keypad.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      unsigned char 
  1238 ;; Registers used:
  1239 ;;		wreg
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1245 ;;      Params:         0       0       0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0       0       0
  1248 ;;      Totals:         0       0       0       0       0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_read_switches
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text8
  1259  000802                     __ptext8:
  1260                           	opt stack 0
  1261  000802                     _scan_key:
  1262                           	opt stack 28
  1263                           
  1264                           ;matrix_keypad.c: 20: PORTBbits.RB5 = 0;
  1265                           
  1266                           ;incstack = 0
  1267  000802  9A81               	bcf	3969,5,c	;volatile
  1268                           
  1269                           ;matrix_keypad.c: 21: PORTBbits.RB6 = 1;
  1270  000804  8C81               	bsf	3969,6,c	;volatile
  1271                           
  1272                           ;matrix_keypad.c: 22: PORTBbits.RB7 = 1;
  1273  000806  8E81               	bsf	3969,7,c	;volatile
  1274                           
  1275                           ;matrix_keypad.c: 24: if (PORTBbits.RB1 == 0)
  1276  000808  B281               	btfsc	3969,1,c	;volatile
  1277  00080A  D002               	goto	l45
  1278                           
  1279                           ;matrix_keypad.c: 25: {
  1280                           ;matrix_keypad.c: 26: return 1;
  1281  00080C  0E01               	movlw	1
  1282  00080E  0012               	return	
  1283  000810                     l45:
  1284                           
  1285                           ;matrix_keypad.c: 28: else if (PORTBbits.RB2 == 0)
  1286  000810  B481               	btfsc	3969,2,c	;volatile
  1287  000812  D002               	goto	l48
  1288                           
  1289                           ;matrix_keypad.c: 29: {
  1290                           ;matrix_keypad.c: 30: return 4;
  1291  000814  0E04               	movlw	4
  1292  000816  0012               	return	
  1293  000818                     l48:
  1294                           
  1295                           ;matrix_keypad.c: 32: else if (PORTBbits.RB3 == 0)
  1296  000818  B681               	btfsc	3969,3,c	;volatile
  1297  00081A  D002               	goto	l50
  1298                           
  1299                           ;matrix_keypad.c: 33: {
  1300                           ;matrix_keypad.c: 34: return 7;
  1301  00081C  0E07               	movlw	7
  1302  00081E  0012               	return	
  1303  000820                     l50:
  1304                           
  1305                           ;matrix_keypad.c: 36: else if (PORTBbits.RB4 == 0)
  1306  000820  B881               	btfsc	3969,4,c	;volatile
  1307  000822  D002               	goto	l47
  1308                           
  1309                           ;matrix_keypad.c: 37: {
  1310                           ;matrix_keypad.c: 38: return 10;
  1311  000824  0E0A               	movlw	10
  1312  000826  0012               	return	
  1313  000828                     l47:
  1314                           
  1315                           ;matrix_keypad.c: 39: }
  1316                           ;matrix_keypad.c: 41: PORTBbits.RB5 = 1;
  1317  000828  8A81               	bsf	3969,5,c	;volatile
  1318                           
  1319                           ;matrix_keypad.c: 42: PORTBbits.RB6 = 0;
  1320  00082A  9C81               	bcf	3969,6,c	;volatile
  1321                           
  1322                           ;matrix_keypad.c: 43: PORTBbits.RB7 = 1;
  1323  00082C  8E81               	bsf	3969,7,c	;volatile
  1324                           
  1325                           ;matrix_keypad.c: 45: if (PORTBbits.RB1 == 0)
  1326  00082E  B281               	btfsc	3969,1,c	;volatile
  1327  000830  D002               	goto	l53
  1328                           
  1329                           ;matrix_keypad.c: 46: {
  1330                           ;matrix_keypad.c: 47: return 2;
  1331  000832  0E02               	movlw	2
  1332  000834  0012               	return	
  1333  000836                     l53:
  1334                           
  1335                           ;matrix_keypad.c: 49: else if (PORTBbits.RB2 == 0)
  1336  000836  B481               	btfsc	3969,2,c	;volatile
  1337  000838  D002               	goto	l55
  1338                           
  1339                           ;matrix_keypad.c: 50: {
  1340                           ;matrix_keypad.c: 51: return 5;
  1341  00083A  0E05               	movlw	5
  1342  00083C  0012               	return	
  1343  00083E                     l55:
  1344                           
  1345                           ;matrix_keypad.c: 53: else if (PORTBbits.RB3 == 0)
  1346  00083E  B681               	btfsc	3969,3,c	;volatile
  1347  000840  D002               	goto	l57
  1348                           
  1349                           ;matrix_keypad.c: 54: {
  1350                           ;matrix_keypad.c: 55: return 8;
  1351  000842  0E08               	movlw	8
  1352  000844  0012               	return	
  1353  000846                     l57:
  1354                           
  1355                           ;matrix_keypad.c: 57: else if (PORTBbits.RB4 == 0)
  1356  000846  B881               	btfsc	3969,4,c	;volatile
  1357  000848  D002               	goto	l54
  1358                           
  1359                           ;matrix_keypad.c: 58: {
  1360                           ;matrix_keypad.c: 59: return 11;
  1361  00084A  0E0B               	movlw	11
  1362  00084C  0012               	return	
  1363  00084E                     l54:
  1364                           
  1365                           ;matrix_keypad.c: 60: }
  1366                           ;matrix_keypad.c: 62: PORTBbits.RB5 = 1;
  1367  00084E  8A81               	bsf	3969,5,c	;volatile
  1368                           
  1369                           ;matrix_keypad.c: 63: PORTBbits.RB6 = 1;
  1370  000850  8C81               	bsf	3969,6,c	;volatile
  1371                           
  1372                           ;matrix_keypad.c: 64: PORTBbits.RB7 = 0;
  1373  000852  9E81               	bcf	3969,7,c	;volatile
  1374                           
  1375                           ;matrix_keypad.c: 66: PORTBbits.RB7 = 0;
  1376  000854  9E81               	bcf	3969,7,c	;volatile
  1377                           
  1378                           ;matrix_keypad.c: 68: if (PORTBbits.RB1 == 0)
  1379  000856  B281               	btfsc	3969,1,c	;volatile
  1380  000858  D002               	goto	l60
  1381                           
  1382                           ;matrix_keypad.c: 69: {
  1383                           ;matrix_keypad.c: 70: return 3;
  1384  00085A  0E03               	movlw	3
  1385  00085C  0012               	return	
  1386  00085E                     l60:
  1387                           
  1388                           ;matrix_keypad.c: 72: else if (PORTBbits.RB2 == 0)
  1389  00085E  B481               	btfsc	3969,2,c	;volatile
  1390  000860  D002               	goto	l62
  1391                           
  1392                           ;matrix_keypad.c: 73: {
  1393                           ;matrix_keypad.c: 74: return 6;
  1394  000862  0E06               	movlw	6
  1395  000864  0012               	return	
  1396  000866                     l62:
  1397                           
  1398                           ;matrix_keypad.c: 76: else if (PORTBbits.RB3 == 0)
  1399  000866  B681               	btfsc	3969,3,c	;volatile
  1400  000868  D002               	goto	l64
  1401                           
  1402                           ;matrix_keypad.c: 77: {
  1403                           ;matrix_keypad.c: 78: return 9;
  1404  00086A  0E09               	movlw	9
  1405  00086C  0012               	return	
  1406  00086E                     l64:
  1407                           
  1408                           ;matrix_keypad.c: 80: else if (PORTBbits.RB4 == 0)
  1409  00086E  B881               	btfsc	3969,4,c	;volatile
  1410  000870  D002               	goto	l843
  1411                           
  1412                           ;matrix_keypad.c: 81: {
  1413                           ;matrix_keypad.c: 82: return 12;
  1414  000872  0E0C               	movlw	12
  1415  000874  0012               	return	
  1416  000876                     l843:
  1417                           
  1418                           ;matrix_keypad.c: 83: }
  1419                           ;matrix_keypad.c: 85: return 0xFF;
  1420  000876  0EFF               	movlw	255
  1421  000878  0012               	return	
  1422  00087A                     __end_of_scan_key:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           intcon2	equ	0xFF1
  1429                           indf0	equ	0xFEF
  1430                           postinc0	equ	0xFEE
  1431                           fsr0h	equ	0xFEA
  1432                           fsr0l	equ	0xFE9
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           indf2	equ	0xFDF
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _clcd_write *****************
  1441 ;; Defined at:
  1442 ;;		line 3 in file "clcd.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  byte            1    wreg     unsigned char 
  1445 ;;  control_bit     1    0[COMRAM] unsigned char 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  byte            1    1[COMRAM] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1457 ;;      Params:         1       0       0       0       0       0       0
  1458 ;;      Locals:         1       0       0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0
  1460 ;;      Totals:         2       0       0       0       0       0       0
  1461 ;;Total ram usage:        2 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_init_clcd
  1467 ;;		_clcd_print
  1468 ;;		_clcd_putch
  1469 ;;		_check_matrix_keypad
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text9
  1474  0009F8                     __ptext9:
  1475                           	opt stack 0
  1476  0009F8                     _clcd_write:
  1477                           	opt stack 28
  1478                           
  1479                           ;incstack = 0
  1480                           ;clcd_write@byte stored from wreg
  1481  0009F8  6E11               	movwf	clcd_write@byte,c
  1482                           
  1483                           ;clcd.c: 5: PORTCbits.RC1 = control_bit;
  1484  0009FA  B010               	btfsc	clcd_write@control_bit,0,c
  1485  0009FC  D002               	bra	u515
  1486  0009FE  9282               	bcf	3970,1,c	;volatile
  1487  000A00  D001               	bra	u516
  1488  000A02                     u515:
  1489  000A02  8282               	bsf	3970,1,c	;volatile
  1490  000A04                     u516:
  1491                           
  1492                           ;clcd.c: 6: PORTD = byte;
  1493  000A04  C011  FF83         	movff	clcd_write@byte,3971	;volatile
  1494                           
  1495                           ;clcd.c: 9: PORTCbits.RC2 = 1;
  1496  000A08  8482               	bsf	3970,2,c	;volatile
  1497                           
  1498                           ;clcd.c: 10: PORTCbits.RC2 = 0;
  1499  000A0A  9482               	bcf	3970,2,c	;volatile
  1500                           
  1501                           ;clcd.c: 12: TRISD7 = 0xFF;
  1502  000A0C  8E95               	bsf	3989,7,c	;volatile
  1503                           
  1504                           ;clcd.c: 13: PORTCbits.RC0 = 1;
  1505  000A0E  8082               	bsf	3970,0,c	;volatile
  1506                           
  1507                           ;clcd.c: 14: PORTCbits.RC1 = 0;
  1508  000A10  9282               	bcf	3970,1,c	;volatile
  1509  000A12                     l1041:
  1510                           
  1511                           ;clcd.c: 17: {
  1512                           ;clcd.c: 18: PORTCbits.RC2 = 1;
  1513  000A12  8482               	bsf	3970,2,c	;volatile
  1514                           
  1515                           ;clcd.c: 19: PORTCbits.RC2 = 0;
  1516  000A14  9482               	bcf	3970,2,c	;volatile
  1517                           
  1518                           ;clcd.c: 20: } while (PORTDbits.RD7);
  1519  000A16  BE83               	btfsc	3971,7,c	;volatile
  1520  000A18  D7FC               	goto	l1041
  1521                           
  1522                           ;clcd.c: 22: PORTCbits.RC0 = 0;
  1523  000A1A  9082               	bcf	3970,0,c	;volatile
  1524                           
  1525                           ;clcd.c: 23: TRISD7 = 0x00;
  1526  000A1C  9E95               	bcf	3989,7,c	;volatile
  1527  000A1E  0012               	return		;funcret
  1528  000A20                     __end_of_clcd_write:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           intcon2	equ	0xFF1
  1535                           indf0	equ	0xFEF
  1536                           postinc0	equ	0xFEE
  1537                           fsr0h	equ	0xFEA
  1538                           fsr0l	equ	0xFE9
  1539                           postdec1	equ	0xFE5
  1540                           fsr1l	equ	0xFE1
  1541                           indf2	equ	0xFDF
  1542                           fsr2h	equ	0xFDA
  1543                           fsr2l	equ	0xFD9
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function ___awmod *****************
  1547 ;; Defined at:
  1548 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/awmod.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  dividend        2    0[COMRAM] int 
  1551 ;;  divisor         2    2[COMRAM] int 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  sign            1    5[COMRAM] unsigned char 
  1554 ;;  counter         1    4[COMRAM] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  2    0[COMRAM] int 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1564 ;;      Params:         4       0       0       0       0       0       0
  1565 ;;      Locals:         2       0       0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0
  1567 ;;      Totals:         6       0       0       0       0       0       0
  1568 ;;Total ram usage:        6 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; This function calls:
  1571 ;;		Nothing
  1572 ;; This function is called by:
  1573 ;;		_main
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text10
  1578  00087A                     __ptext10:
  1579                           	opt stack 0
  1580  00087A                     ___awmod:
  1581                           	opt stack 30
  1582                           
  1583                           ;incstack = 0
  1584  00087A  0E00               	movlw	0
  1585  00087C  6E15               	movwf	___awmod@sign,c
  1586  00087E  AE11               	btfss	___awmod@dividend+1,7,c
  1587  000880  D006               	goto	l1117
  1588  000882  6C10               	negf	___awmod@dividend,c
  1589  000884  1E11               	comf	___awmod@dividend+1,f,c
  1590  000886  B0D8               	btfsc	status,0,c
  1591  000888  2A11               	incf	___awmod@dividend+1,f,c
  1592  00088A  0E01               	movlw	1
  1593  00088C  6E15               	movwf	___awmod@sign,c
  1594  00088E                     l1117:
  1595  00088E  AE13               	btfss	___awmod@divisor+1,7,c
  1596  000890  D004               	goto	l1121
  1597  000892  6C12               	negf	___awmod@divisor,c
  1598  000894  1E13               	comf	___awmod@divisor+1,f,c
  1599  000896  B0D8               	btfsc	status,0,c
  1600  000898  2A13               	incf	___awmod@divisor+1,f,c
  1601  00089A                     l1121:
  1602  00089A  5012               	movf	___awmod@divisor,w,c
  1603  00089C  1013               	iorwf	___awmod@divisor+1,w,c
  1604  00089E  B4D8               	btfsc	status,2,c
  1605  0008A0  D018               	goto	l1137
  1606  0008A2  0E01               	movlw	1
  1607  0008A4  6E14               	movwf	___awmod@counter,c
  1608  0008A6  D004               	goto	l1127
  1609  0008A8                     l1125:
  1610  0008A8  90D8               	bcf	status,0,c
  1611  0008AA  3612               	rlcf	___awmod@divisor,f,c
  1612  0008AC  3613               	rlcf	___awmod@divisor+1,f,c
  1613  0008AE  2A14               	incf	___awmod@counter,f,c
  1614  0008B0                     l1127:
  1615  0008B0  AE13               	btfss	___awmod@divisor+1,7,c
  1616  0008B2  D7FA               	goto	l1125
  1617  0008B4                     l1129:
  1618  0008B4  5012               	movf	___awmod@divisor,w,c
  1619  0008B6  5C10               	subwf	___awmod@dividend,w,c
  1620  0008B8  5013               	movf	___awmod@divisor+1,w,c
  1621  0008BA  5811               	subwfb	___awmod@dividend+1,w,c
  1622  0008BC  A0D8               	btfss	status,0,c
  1623  0008BE  D004               	goto	l1133
  1624  0008C0  5012               	movf	___awmod@divisor,w,c
  1625  0008C2  5E10               	subwf	___awmod@dividend,f,c
  1626  0008C4  5013               	movf	___awmod@divisor+1,w,c
  1627  0008C6  5A11               	subwfb	___awmod@dividend+1,f,c
  1628  0008C8                     l1133:
  1629  0008C8  90D8               	bcf	status,0,c
  1630  0008CA  3213               	rrcf	___awmod@divisor+1,f,c
  1631  0008CC  3212               	rrcf	___awmod@divisor,f,c
  1632  0008CE  2E14               	decfsz	___awmod@counter,f,c
  1633  0008D0  D7F1               	goto	l1129
  1634  0008D2                     l1137:
  1635  0008D2  5015               	movf	___awmod@sign,w,c
  1636  0008D4  B4D8               	btfsc	status,2,c
  1637  0008D6  D004               	goto	l1141
  1638  0008D8  6C10               	negf	___awmod@dividend,c
  1639  0008DA  1E11               	comf	___awmod@dividend+1,f,c
  1640  0008DC  B0D8               	btfsc	status,0,c
  1641  0008DE  2A11               	incf	___awmod@dividend+1,f,c
  1642  0008E0                     l1141:
  1643  0008E0  C010  F010         	movff	___awmod@dividend,?___awmod
  1644  0008E4  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  1645  0008E8  0012               	return	
  1646  0008EA                     __end_of___awmod:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           intcon2	equ	0xFF1
  1653                           indf0	equ	0xFEF
  1654                           postinc0	equ	0xFEE
  1655                           fsr0h	equ	0xFEA
  1656                           fsr0l	equ	0xFE9
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           indf2	equ	0xFDF
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           intcon2	equ	0xFF1
  1668                           indf0	equ	0xFEF
  1669                           postinc0	equ	0xFEE
  1670                           fsr0h	equ	0xFEA
  1671                           fsr0l	equ	0xFE9
  1672                           postdec1	equ	0xFE5
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679                           	psect	rparam
  1680  0000                     tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           intcon2	equ	0xFF1
  1685                           indf0	equ	0xFEF
  1686                           postinc0	equ	0xFEE
  1687                           fsr0h	equ	0xFEA
  1688                           fsr0l	equ	0xFE9
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           indf2	equ	0xFDF
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    0
    Data        15
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      33
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[13]), STR_1(CODE[17]), count_str(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->___awmod
    _main->_check_matrix_keypad
    _init_clcd->_clcd_write
    _clcd_putch->_clcd_write
    _clcd_print->_clcd_write
    _check_matrix_keypad->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3867
                                              6 COMRAM     6     6      0
                            ___awmod
                _check_matrix_keypad
                         _clcd_print
                         _clcd_putch
                        _init_config
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0     620
                          _init_clcd
                 _init_matrix_keypad
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0     620
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_putch                                           2     1      1     728
                                              2 COMRAM     2     1      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           3     0      3    1199
                                              2 COMRAM     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _check_matrix_keypad                                  4     4      0     762
                                              2 COMRAM     4     4      0
                         _clcd_write
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _read_switches                                        1     1      0      30
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (3) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1     620
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _check_matrix_keypad
     _clcd_write
     _read_switches
       _scan_key
   _clcd_print
     _clcd_write
   _clcd_putch
     _clcd_write
   _init_config
     _init_clcd
       _clcd_write
     _init_matrix_keypad

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      21       1       34.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      21       3        0.0%
DATA                 0      0      21      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed Feb  5 17:49:33 2020

              clcd_print@addr 0014                clcd_print@data 0012                            l50 0820  
                          l60 085E                            l53 0836                            l45 0810  
                          l62 0866                            l54 084E                            l55 083E  
                          l47 0828                            l64 086E                            l48 0818  
                          l57 0846            _init_matrix_keypad 0A38                           l129 0644  
                         l843 0876                           l881 096C                           l893 0988  
                         l887 097C                           u530 091A                           u515 0A02  
                         u516 0A04                           u540 0942                           u537 0910  
                         u547 0938                           u580 0768                           u590 076A  
              clcd_putch@addr 0012                clcd_putch@data 0013                  ___awmod@sign 0015  
         ?_init_matrix_keypad 0010                          l1101 07CE                          l1121 089A  
                        l1041 0A12                          l1141 08E0                          l1133 08C8  
                        l1125 08A8                          l1117 088E                          l1127 08B0  
                        l1063 08F6                          l1129 08B4                          l1137 08D2  
                        l1067 0922                          l1147 0624                          l1093 079A  
                        l1085 0778                          l1077 0748                          l1173 06AE  
                        l1157 0652                          l1175 06B2                          l1185 0714  
                        l1169 06A6                          l1187 0726                          l1179 06D4  
                        l1189 0732                          STR_1 0601                          STR_2 0612  
                        _RBPU 007F8F                          _main 0620                          _wait 001C  
                        fsr0h 000FEA                          indf0 000FEF                          fsr0l 000FE9  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        start 0000          ??_init_matrix_keypad 0010                  ___param_bank 000010  
              clcd_write@byte 0011        read_switches@key_state 0021                         ?_main 0010  
             __end_of___awmod 08EA                  ?_init_config 0010                         _PORTB 000F81  
                       _PORTD 000F83                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _delay 001F           _check_matrix_keypad 0738  
                       main@i 001A                         tablat 000FF5                         status 000FD8  
             __initialization 098C                  __end_of_main 0738          ?_check_matrix_keypad 0010  
                      ??_main 0016                 __activetblptr 000002                        _ADCON1 000FC1  
            read_switches@key 0020                        _TRISD7 007CAF         ??_check_matrix_keypad 0012  
                   ??___awmod 0014               ___awmod@divisor 0012              __end_of_scan_key 087A  
             ___awmod@counter 0014                  __pdataCOMRAM 0001                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0060       __end_of__initialization 09B8                 ___rparam_used 000001  
              _selected_index 0001                __pcstackCOMRAM 0010        __size_of_read_switches 0042  
        __size_of_init_config 000A            __size_of_init_clcd 0036                    _clcd_print 08EA  
                  _clcd_putch 0A20                    _clcd_write 09F8                _count_overflow 001E  
           read_switches@once 0004                 _read_switches 094A                     ?_scan_key 0010  
                     __Hparam 0000                       __Lparam 0000   __size_of_init_matrix_keypad 0012  
                     ___awmod 087A                  __psmallconst 0600                       __pcinit 098C  
                     __ramtop 0600                       __ptext0 0620                       __ptext1 0A5A  
                     __ptext2 0A38                       __ptext3 09C2                       __ptext4 0A20  
                     __ptext5 08EA                       __ptext6 0738                       __ptext7 094A  
                     __ptext8 0802                       __ptext9 09F8                       _display 0003  
           __end_of_init_clcd 09F8              ___awmod@dividend 0010                ?_read_switches 0010  
        end_of_initialization 09B8                 __Lmediumconst 0000                    ??_scan_key 0010  
                 ?_clcd_print 0012                   ?_clcd_putch 0012                   ?_clcd_write 0010  
                     postdec1 000FE5                       postinc0 000FEE                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _PORTDbits 000F83   __end_of_check_matrix_keypad 0802  
               __pidataCOMRAM 0A4A           start_initialization 098C               ??_read_switches 0010  
         __size_of_clcd_print 0060           __size_of_clcd_putch 0018           __size_of_clcd_write 0028  
 read_switches@detection_type 0010                 ??_init_config 0012                   __pbssCOMRAM 001C  
           __size_of_scan_key 0078                      ?___awmod 0010                   __smallconst 0600  
                   _count_str 0005                     _init_clcd 09C2           __end_of_init_config 0A64  
                ??_clcd_print 0015                  ??_clcd_putch 0013    __end_of_init_matrix_keypad 0A4A  
                ??_clcd_write 0011         clcd_write@control_bit 0010            __end_of_clcd_print 094A  
          __end_of_clcd_putch 0A38            __end_of_clcd_write 0A20                    ?_init_clcd 0010  
                   copy_data0 09AC                      __Hrparam 0000                      __Lrparam 0000  
            __size_of___awmod 0070                   _init_config 0A5A                      __ptext10 087A  
               __size_of_main 0118                      _scan_key 0802  __size_of_check_matrix_keypad 00CA  
                 ??_init_clcd 0012         __end_of_read_switches 098C        check_matrix_keypad@key 0015  
        check_matrix_keypad@i 0013  
