

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Jan 31 13:13:07 2020

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	idataCOMRAM
    35  000C54                     __pidataCOMRAM:
    36                           	opt stack 0
    37                           
    38                           ;initializer for _disp_num
    39  000C54  01                 	db	1
    40                           
    41                           ;initializer for _display
    42  000C55  01                 	db	1
    43                           
    44                           ;initializer for read_switches@once
    45  000C56  01                 	db	1
    46                           
    47                           ;initializer for _count_str
    48  000C57  30                 	db	48
    49  000C58  30                 	db	48
    50  000C59  30                 	db	48
    51  000C5A  30                 	db	48
    52  000C5B  30                 	db	48
    53  000C5C  30                 	db	48
    54  000C5D  30                 	db	48
    55  000C5E  30                 	db	48
    56  000C5F  30                 	db	48
    57  000C60  30                 	db	48
    58  000C61  00                 	db	0
    59  0000                     _TMR0	set	4054
    60  0000                     _ADCON1	set	4033
    61  0000                     _EEADR	set	4009
    62  0000                     _EECON1bits	set	4006
    63  0000                     _EECON2	set	4007
    64  0000                     _EEDATA	set	4008
    65  0000                     _PIR2bits	set	4001
    66  0000                     _PORTB	set	3969
    67  0000                     _PORTBbits	set	3969
    68  0000                     _PORTCbits	set	3970
    69  0000                     _PORTD	set	3971
    70  0000                     _PORTDbits	set	3971
    71  0000                     _TRISB	set	3987
    72  0000                     _TRISC	set	3988
    73  0000                     _TRISD	set	3989
    74  0000                     _GIE	set	32663
    75  0000                     _PSA	set	32427
    76  0000                     _RBPU	set	32655
    77  0000                     _T08BIT	set	32430
    78  0000                     _T0CS	set	32429
    79  0000                     _T0PS0	set	32424
    80  0000                     _T0PS1	set	32425
    81  0000                     _T0PS2	set	32426
    82  0000                     _TMR0IE	set	32661
    83  0000                     _TMR0IF	set	32658
    84  0000                     _TMR0ON	set	32431
    85  0000                     _TRISD7	set	31919
    86                           
    87                           	psect	smallconst
    88  000600                     __psmallconst:
    89                           	opt stack 0
    90  000600  00                 	db	0
    91  000601                     STR_1:
    92  000601  43                 	db	67	;'C'
    93  000602  4F                 	db	79	;'O'
    94  000603  55                 	db	85	;'U'
    95  000604  4E                 	db	78	;'N'
    96  000605  54                 	db	84	;'T'
    97  000606  49                 	db	73	;'I'
    98  000607  4E                 	db	78	;'N'
    99  000608  47                 	db	71	;'G'
   100  000609  20                 	db	32
   101  00060A  44                 	db	68	;'D'
   102  00060B  49                 	db	73	;'I'
   103  00060C  53                 	db	83	;'S'
   104  00060D  50                 	db	80	;'P'
   105  00060E  4C                 	db	76	;'L'
   106  00060F  41                 	db	65	;'A'
   107  000610  59                 	db	89	;'Y'
   108  000611  00                 	db	0
   109  000612                     STR_2:
   110  000612  45                 	db	69	;'E'
   111  000613  45                 	db	69	;'E'
   112  000614  50                 	db	80	;'P'
   113  000615  52                 	db	82	;'R'
   114  000616  4F                 	db	79	;'O'
   115  000617  4D                 	db	77	;'M'
   116  000618  20                 	db	32
   117  000619  53                 	db	83	;'S'
   118  00061A  54                 	db	84	;'T'
   119  00061B  4F                 	db	79	;'O'
   120  00061C  52                 	db	82	;'R'
   121  00061D  41                 	db	65	;'A'
   122  00061E  47                 	db	71	;'G'
   123  00061F  45                 	db	69	;'E'
   124  000620  00                 	db	0
   125  000621                     STR_3:
   126  000621  31                 	db	49	;'1'
   127  000622  30                 	db	48	;'0'
   128  000623  00                 	db	0
   129  000624  00                 	db	0	; dummy byte at the end
   130  0000                     
   131                           ; #config settings
   132                           
   133                           	psect	cinit
   134  000B30                     __pcinit:
   135                           	opt stack 0
   136  000B30                     start_initialization:
   137                           	opt stack 0
   138  000B30                     __initialization:
   139                           	opt stack 0
   140                           
   141                           ; Clear objects allocated to COMRAM (21 bytes)
   142  000B30  EE00  F021         	lfsr	0,__pbssCOMRAM
   143  000B34  0E15               	movlw	21
   144  000B36                     clear_0:
   145  000B36  6AEE               	clrf	postinc0,c
   146  000B38  06E8               	decf	wreg,f,c
   147  000B3A  E1FD               	bnz	clear_0
   148                           
   149                           ; Initialize objects allocated to COMRAM (14 bytes)
   150                           ; load TBLPTR registers with __pidataCOMRAM
   151  000B3C  0E54               	movlw	low __pidataCOMRAM
   152  000B3E  6EF6               	movwf	tblptrl,c
   153  000B40  0E0C               	movlw	high __pidataCOMRAM
   154  000B42  6EF7               	movwf	tblptrh,c
   155  000B44  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   156  000B46  6EF8               	movwf	tblptru,c
   157  000B48  EE00  F036         	lfsr	0,__pdataCOMRAM
   158  000B4C  EE10 F00E          	lfsr	1,14
   159  000B50                     copy_data0:
   160  000B50  0009               	tblrd		*+
   161  000B52  CFF5 FFEE          	movff	tablat,postinc0
   162  000B56  50E5               	movf	postdec1,w,c
   163  000B58  50E1               	movf	fsr1l,w,c
   164  000B5A  E1FA               	bnz	copy_data0
   165  000B5C                     end_of_initialization:
   166                           	opt stack 0
   167  000B5C                     __end_of__initialization:
   168                           	opt stack 0
   169  000B5C  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   170  000B5E  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   171  000B60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   172  000B62  6EF8               	movwf	tblptru,c
   173  000B64  0100               	movlb	0
   174  000B66  EF13  F003         	goto	_main	;jump to C main() function
   175                           tblptru	equ	0xFF8
   176                           tblptrh	equ	0xFF7
   177                           tblptrl	equ	0xFF6
   178                           tablat	equ	0xFF5
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           postdec1	equ	0xFE5
   182                           fsr1l	equ	0xFE1
   183                           
   184                           	psect	bssCOMRAM
   185  000021                     __pbssCOMRAM:
   186                           	opt stack 0
   187  000021                     _delay:
   188                           	opt stack 0
   189  000021                     	ds	2
   190  000023                     _tim_count:
   191                           	opt stack 0
   192  000023                     	ds	2
   193  000025                     _count_overflow:
   194                           	opt stack 0
   195  000025                     	ds	1
   196  000026                     _eeprom_addr:
   197                           	opt stack 0
   198  000026                     	ds	1
   199  000027                     _first_change:
   200                           	opt stack 0
   201  000027                     	ds	1
   202  000028                     _read_addr:
   203                           	opt stack 0
   204  000028                     	ds	1
   205  000029                     read_switches@key:
   206                           	opt stack 0
   207  000029                     	ds	1
   208  00002A                     read_switches@key_state:
   209                           	opt stack 0
   210  00002A                     	ds	1
   211  00002B                     _storage_str:
   212                           	opt stack 0
   213  00002B                     	ds	11
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	dataCOMRAM
   224  000036                     __pdataCOMRAM:
   225                           	opt stack 0
   226  000036                     _disp_num:
   227                           	opt stack 0
   228  000036                     	ds	1
   229  000037                     _display:
   230                           	opt stack 0
   231  000037                     	ds	1
   232  000038                     read_switches@once:
   233                           	opt stack 0
   234  000038                     	ds	1
   235  000039                     _count_str:
   236                           	opt stack 0
   237  000039                     	ds	11
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           postdec1	equ	0xFE5
   245                           fsr1l	equ	0xFE1
   246                           
   247                           	psect	cstackCOMRAM
   248  000001                     __pcstackCOMRAM:
   249                           	opt stack 0
   250  000001                     ??_isr:
   251  000001                     
   252                           ; 1 bytes @ 0x0
   253  000001                     	ds	14
   254  00000F                     ?___awmod:
   255                           	opt stack 0
   256  00000F                     ?___lwmod:
   257                           	opt stack 0
   258  00000F                     clcd_write@control_bit:
   259                           	opt stack 0
   260  00000F                     read_switches@detection_type:
   261                           	opt stack 0
   262  00000F                     read_internal_eeprom@address:
   263                           	opt stack 0
   264  00000F                     ___awmod@dividend:
   265                           	opt stack 0
   266  00000F                     ___lwmod@dividend:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0xE
   270  00000F                     	ds	1
   271  000010                     clcd_write@byte:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0xF
   275  000010                     	ds	1
   276  000011                     clcd_putch@addr:
   277                           	opt stack 0
   278  000011                     clcd_print@data:
   279                           	opt stack 0
   280  000011                     ___awmod@divisor:
   281                           	opt stack 0
   282  000011                     ___lwmod@divisor:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x10
   286  000011                     	ds	1
   287  000012                     clcd_putch@data:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x11
   291  000012                     	ds	1
   292  000013                     clcd_print@addr:
   293                           	opt stack 0
   294  000013                     ___awmod@counter:
   295                           	opt stack 0
   296  000013                     ___lwmod@counter:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x12
   300  000013                     	ds	1
   301  000014                     ___awmod@sign:
   302                           	opt stack 0
   303  000014                     read_from_eeprom@i:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x13
   307  000014                     	ds	1
   308  000015                     write_internal_eeprom@data:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x14
   312  000015                     	ds	1
   313  000016                     write_internal_eeprom@address:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x15
   317  000016                     	ds	1
   318  000017                     write_onto_eeprom@i:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x16
   322  000017                     	ds	2
   323  000019                     check_matrix_keypad@key_level_trig:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x18
   327  000019                     	ds	1
   328  00001A                     check_matrix_keypad@key_edge_trig:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x19
   332  00001A                     	ds	1
   333  00001B                     ??_main:
   334                           
   335                           ; 1 bytes @ 0x1A
   336  00001B                     	ds	4
   337  00001F                     main@i:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x1E
   341  00001F                     	ds	2
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351 ;;
   352 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   353 ;;
   354 ;; *************** function _main *****************
   355 ;; Defined at:
   356 ;;		line 116 in file "main.c"
   357 ;; Parameters:    Size  Location     Type
   358 ;;		None
   359 ;; Auto vars:     Size  Location     Type
   360 ;;  i               2   30[COMRAM] short 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : 0/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   370 ;;      Params:         0       0       0       0       0       0       0
   371 ;;      Locals:         2       0       0       0       0       0       0
   372 ;;      Temps:          4       0       0       0       0       0       0
   373 ;;      Totals:         6       0       0       0       0       0       0
   374 ;;Total ram usage:        6 bytes
   375 ;; Hardware stack levels required when called:    4
   376 ;; This function calls:
   377 ;;		_check_matrix_keypad
   378 ;;		_clcd_print
   379 ;;		_clcd_putch
   380 ;;		_init_config
   381 ;; This function is called by:
   382 ;;		Startup code after reset
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text0
   387  000626                     __ptext0:
   388                           	opt stack 0
   389  000626                     _main:
   390                           	opt stack 27
   391                           
   392                           ;main.c: 119: init_config();
   393                           
   394                           ;incstack = 0
   395  000626  EC22  F006         	call	_init_config	;wreg free
   396  00062A                     l1463:
   397                           
   398                           ;main.c: 121: {
   399                           ;main.c: 123: if (delay++ == 150)
   400  00062A  4A21               	infsnz	_delay,f,c
   401  00062C  2A22               	incf	_delay+1,f,c
   402  00062E  0E97               	movlw	151
   403  000630  1821               	xorwf	_delay,w,c
   404  000632  1022               	iorwf	_delay+1,w,c
   405  000634  A4D8               	btfss	status,2,c
   406  000636  D00A               	goto	l136
   407                           
   408                           ;main.c: 124: {
   409                           ;main.c: 126: if (++count_str[9] > '9')
   410  000638  2A42               	incf	_count_str+9,f,c
   411  00063A  0E39               	movlw	57
   412  00063C  6442               	cpfsgt	_count_str+9,c
   413  00063E  D002               	goto	l137
   414                           
   415                           ;main.c: 127: count_overflow = 1;
   416  000640  0E01               	movlw	1
   417  000642  6E25               	movwf	_count_overflow,c
   418  000644                     l137:
   419                           
   420                           ;main.c: 129: delay = 0;
   421  000644  0E00               	movlw	0
   422  000646  6E22               	movwf	_delay+1,c
   423  000648  0E00               	movlw	0
   424  00064A  6E21               	movwf	_delay,c
   425  00064C                     l136:
   426                           
   427                           ;main.c: 130: }
   428                           ;main.c: 132: if (count_overflow)
   429  00064C  5025               	movf	_count_overflow,w,c
   430  00064E  B4D8               	btfsc	status,2,c
   431  000650  D034               	goto	l1489
   432                           
   433                           ;main.c: 133: {
   434                           ;main.c: 135: for (short i = 9; i >= 0; i--)
   435  000652  0E00               	movlw	0
   436  000654  6E20               	movwf	main@i+1,c
   437  000656  0E09               	movlw	9
   438  000658  6E1F               	movwf	main@i,c
   439  00065A                     l1471:
   440  00065A  BE20               	btfsc	main@i+1,7,c
   441  00065C  D02C               	goto	l1487
   442                           
   443                           ;main.c: 136: {
   444                           ;main.c: 138: if (count_str[i] > '9')
   445  00065E  0E39               	movlw	low _count_str
   446  000660  241F               	addwf	main@i,w,c
   447  000662  6ED9               	movwf	fsr2l,c
   448  000664  0E00               	movlw	high _count_str
   449  000666  2020               	addwfc	main@i+1,w,c
   450  000668  6EDA               	movwf	fsr2h,c
   451  00066A  0E39               	movlw	57
   452  00066C  64DF               	cpfsgt	indf2,c
   453  00066E  D023               	goto	l1487
   454                           
   455                           ;main.c: 139: {
   456                           ;main.c: 140: count_str[i] = '0';
   457  000670  0E39               	movlw	low _count_str
   458  000672  241F               	addwf	main@i,w,c
   459  000674  6ED9               	movwf	fsr2l,c
   460  000676  0E00               	movlw	high _count_str
   461  000678  2020               	addwfc	main@i+1,w,c
   462  00067A  6EDA               	movwf	fsr2h,c
   463  00067C  0E30               	movlw	48
   464  00067E  6EDF               	movwf	indf2,c
   465                           
   466                           ;main.c: 141: if (i)
   467  000680  501F               	movf	main@i,w,c
   468  000682  1020               	iorwf	main@i+1,w,c
   469  000684  B4D8               	btfsc	status,2,c
   470  000686  D013               	goto	l1483
   471                           
   472                           ;main.c: 142: count_str[i - 1] += 1;
   473  000688  0EFF               	movlw	255
   474  00068A  6E1B               	movwf	??_main& (0+255),c
   475  00068C  0EFF               	movlw	255
   476  00068E  6E1C               	movwf	(??_main+1)& (0+255),c
   477  000690  C01F  F01D         	movff	main@i,??_main+2
   478  000694  C020  F01E         	movff	main@i+1,??_main+3
   479  000698  501B               	movf	??_main,w,c
   480  00069A  261D               	addwf	??_main+2,f,c
   481  00069C  501C               	movf	??_main+1,w,c
   482  00069E  221E               	addwfc	??_main+3,f,c
   483  0006A0  0E39               	movlw	low _count_str
   484  0006A2  241D               	addwf	??_main+2,w,c
   485  0006A4  6ED9               	movwf	fsr2l,c
   486  0006A6  0E00               	movlw	high _count_str
   487  0006A8  201E               	addwfc	??_main+3,w,c
   488  0006AA  6EDA               	movwf	fsr2h,c
   489  0006AC  2ADF               	incf	indf2,f,c
   490  0006AE                     l1483:
   491  0006AE  061F               	decf	main@i,f,c
   492  0006B0  A0D8               	btfss	status,0,c
   493  0006B2  0620               	decf	main@i+1,f,c
   494  0006B4  D7D2               	goto	l1471
   495  0006B6                     l1487:
   496                           
   497                           ;main.c: 147: }
   498                           ;main.c: 149: count_overflow = 0;
   499  0006B6  0E00               	movlw	0
   500  0006B8  6E25               	movwf	_count_overflow,c
   501  0006BA                     l1489:
   502                           
   503                           ;main.c: 150: }
   504                           ;main.c: 152: if (display == 1)
   505  0006BA  0437               	decf	_display,w,c
   506  0006BC  A4D8               	btfss	status,2,c
   507  0006BE  D011               	goto	l1493
   508                           
   509                           ;main.c: 153: {
   510                           ;main.c: 154: clcd_print("COUNTING DISPLAY", (0x80 + (0)));
   511  0006C0  0E01               	movlw	low STR_1
   512  0006C2  6E11               	movwf	clcd_print@data,c
   513  0006C4  0E06               	movlw	high STR_1
   514  0006C6  6E12               	movwf	clcd_print@data+1,c
   515  0006C8  0E80               	movlw	128
   516  0006CA  6E13               	movwf	clcd_print@addr,c
   517  0006CC  EC03  F005         	call	_clcd_print	;wreg free
   518                           
   519                           ;main.c: 155: clcd_print(count_str, (0xC0 + (3)));
   520  0006D0  0E39               	movlw	low _count_str
   521  0006D2  6E11               	movwf	clcd_print@data,c
   522  0006D4  0E00               	movlw	high _count_str
   523  0006D6  6E12               	movwf	clcd_print@data+1,c
   524  0006D8  0EC3               	movlw	195
   525  0006DA  6E13               	movwf	clcd_print@addr,c
   526  0006DC  EC03  F005         	call	_clcd_print	;wreg free
   527                           
   528                           ;main.c: 156: }
   529  0006E0  D028               	goto	l1505
   530  0006E2                     l1493:
   531                           
   532                           ;main.c: 158: else
   533                           ;main.c: 159: {
   534                           ;main.c: 160: clcd_print("EEPROM STORAGE", (0x80 + (1)));
   535  0006E2  0E12               	movlw	low STR_2
   536  0006E4  6E11               	movwf	clcd_print@data,c
   537  0006E6  0E06               	movlw	high STR_2
   538  0006E8  6E12               	movwf	clcd_print@data+1,c
   539  0006EA  0E81               	movlw	129
   540  0006EC  6E13               	movwf	clcd_print@addr,c
   541  0006EE  EC03  F005         	call	_clcd_print	;wreg free
   542                           
   543                           ;main.c: 162: if (disp_num == 10)
   544  0006F2  0E0A               	movlw	10
   545  0006F4  1836               	xorwf	_disp_num,w,c
   546  0006F6  A4D8               	btfss	status,2,c
   547  0006F8  D009               	goto	l1499
   548                           
   549                           ;main.c: 163: clcd_print("10", (0xC0 + (1)));
   550  0006FA  0E21               	movlw	low STR_3
   551  0006FC  6E11               	movwf	clcd_print@data,c
   552  0006FE  0E06               	movlw	high STR_3
   553  000700  6E12               	movwf	clcd_print@data+1,c
   554  000702  0EC1               	movlw	193
   555  000704  6E13               	movwf	clcd_print@addr,c
   556  000706  EC03  F005         	call	_clcd_print	;wreg free
   557  00070A  D006               	goto	l1501
   558  00070C                     l1499:
   559                           
   560                           ;main.c: 164: else
   561                           ;main.c: 165: clcd_putch('0' + disp_num, (0xC0 + (2)));
   562  00070C  0EC2               	movlw	194
   563  00070E  6E11               	movwf	clcd_putch@addr,c
   564  000710  5036               	movf	_disp_num,w,c
   565  000712  0F30               	addlw	48
   566  000714  EC04  F006         	call	_clcd_putch
   567  000718                     l1501:
   568                           
   569                           ;main.c: 166: clcd_putch('.', (0xC0 + (3)));
   570  000718  0EC3               	movlw	195
   571  00071A  6E11               	movwf	clcd_putch@addr,c
   572  00071C  0E2E               	movlw	46
   573  00071E  EC04  F006         	call	_clcd_putch
   574                           
   575                           ;main.c: 167: clcd_print(storage_str, (0xC0 + (5)));
   576  000722  0E2B               	movlw	low _storage_str
   577  000724  6E11               	movwf	clcd_print@data,c
   578  000726  0E00               	movlw	high _storage_str
   579  000728  6E12               	movwf	clcd_print@data+1,c
   580  00072A  0EC5               	movlw	197
   581  00072C  6E13               	movwf	clcd_print@addr,c
   582  00072E  EC03  F005         	call	_clcd_print	;wreg free
   583  000732                     l1505:
   584                           
   585                           ;main.c: 168: }
   586                           ;main.c: 170: check_matrix_keypad();
   587  000732  EC9C  F003         	call	_check_matrix_keypad	;wreg free
   588  000736  D779               	goto	l1463
   589  000738                     __end_of_main:
   590                           	opt stack 0
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           indf2	equ	0xFDF
   600                           fsr2h	equ	0xFDA
   601                           fsr2l	equ	0xFD9
   602                           status	equ	0xFD8
   603                           
   604 ;; *************** function _init_config *****************
   605 ;; Defined at:
   606 ;;		line 11 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         0       0       0       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0
   623 ;;      Totals:         0       0       0       0       0       0       0
   624 ;;Total ram usage:        0 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    3
   627 ;; This function calls:
   628 ;;		_init_clcd
   629 ;;		_init_matrix_keypad
   630 ;;		_init_timer0
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text1
   637  000C44                     __ptext1:
   638                           	opt stack 0
   639  000C44                     _init_config:
   640                           	opt stack 27
   641                           
   642                           ;main.c: 13: init_clcd();
   643                           
   644                           ;incstack = 0
   645  000C44  ECB5  F005         	call	_init_clcd	;wreg free
   646                           
   647                           ;main.c: 14: init_matrix_keypad();
   648  000C48  EC10  F006         	call	_init_matrix_keypad	;wreg free
   649                           
   650                           ;main.c: 15: init_timer0();
   651  000C4C  ECF7  F005         	call	_init_timer0	;wreg free
   652                           
   653                           ;main.c: 16: GIE = 1;
   654  000C50  8EF2               	bsf	intcon,7,c	;volatile
   655  000C52  0012               	return		;funcret
   656  000C54                     __end_of_init_config:
   657                           	opt stack 0
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           intcon	equ	0xFF2
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1l	equ	0xFE1
   667                           indf2	equ	0xFDF
   668                           fsr2h	equ	0xFDA
   669                           fsr2l	equ	0xFD9
   670                           status	equ	0xFD8
   671                           
   672 ;; *************** function _init_timer0 *****************
   673 ;; Defined at:
   674 ;;		line 3 in file "timer0.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, status,2
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   688 ;;      Params:         0       0       0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0       0       0
   690 ;;      Temps:          0       0       0       0       0       0       0
   691 ;;      Totals:         0       0       0       0       0       0       0
   692 ;;Total ram usage:        0 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_init_config
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text2
   703  000BEE                     __ptext2:
   704                           	opt stack 0
   705  000BEE                     _init_timer0:
   706                           	opt stack 28
   707                           
   708                           ;timer0.c: 6: T08BIT = 0;
   709                           
   710                           ;incstack = 0
   711  000BEE  9CD5               	bcf	4053,6,c	;volatile
   712                           
   713                           ;timer0.c: 8: PSA = 0;
   714  000BF0  96D5               	bcf	4053,3,c	;volatile
   715                           
   716                           ;timer0.c: 10: T0PS0 = 0;
   717  000BF2  90D5               	bcf	4053,0,c	;volatile
   718                           
   719                           ;timer0.c: 11: T0PS1 = 1;
   720  000BF4  82D5               	bsf	4053,1,c	;volatile
   721                           
   722                           ;timer0.c: 12: T0PS2 = 0;
   723  000BF6  94D5               	bcf	4053,2,c	;volatile
   724                           
   725                           ;timer0.c: 14: T0CS = 0;
   726  000BF8  9AD5               	bcf	4053,5,c	;volatile
   727                           
   728                           ;timer0.c: 17: TMR0 = 3036;
   729  000BFA  0E0B               	movlw	11
   730  000BFC  6ED7               	movwf	4055,c	;volatile
   731  000BFE  0EDC               	movlw	220
   732  000C00  6ED6               	movwf	4054,c	;volatile
   733                           
   734                           ;timer0.c: 20: TMR0IF = 0;
   735  000C02  94F2               	bcf	intcon,2,c	;volatile
   736                           
   737                           ;timer0.c: 23: TMR0IE = 1;
   738  000C04  8AF2               	bsf	intcon,5,c	;volatile
   739  000C06  0012               	return		;funcret
   740  000C08                     __end_of_init_timer0:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           intcon	equ	0xFF2
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           indf2	equ	0xFDF
   752                           fsr2h	equ	0xFDA
   753                           fsr2l	equ	0xFD9
   754                           status	equ	0xFD8
   755                           
   756 ;; *************** function _init_matrix_keypad *****************
   757 ;; Defined at:
   758 ;;		line 4 in file "matrix_keypad.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   772 ;;      Params:         0       0       0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0
   775 ;;      Totals:         0       0       0       0       0       0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		Nothing
   781 ;; This function is called by:
   782 ;;		_init_config
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text3
   787  000C20                     __ptext3:
   788                           	opt stack 0
   789  000C20                     _init_matrix_keypad:
   790                           	opt stack 28
   791                           
   792                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
   793                           
   794                           ;incstack = 0
   795  000C20  0E0F               	movlw	15
   796  000C22  6EC1               	movwf	4033,c	;volatile
   797                           
   798                           ;matrix_keypad.c: 10: TRISB = 0x1E;
   799  000C24  0E1E               	movlw	30
   800  000C26  6E93               	movwf	3987,c	;volatile
   801                           
   802                           ;matrix_keypad.c: 13: RBPU = 0;
   803  000C28  9EF1               	bcf	intcon2,7,c	;volatile
   804                           
   805                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
   806  000C2A  5081               	movf	3969,w,c	;volatile
   807  000C2C  09E0               	iorlw	224
   808  000C2E  6E81               	movwf	3969,c	;volatile
   809  000C30  0012               	return		;funcret
   810  000C32                     __end_of_init_matrix_keypad:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           intcon	equ	0xFF2
   817                           intcon2	equ	0xFF1
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           postdec1	equ	0xFE5
   821                           fsr1l	equ	0xFE1
   822                           indf2	equ	0xFDF
   823                           fsr2h	equ	0xFDA
   824                           fsr2l	equ	0xFD9
   825                           status	equ	0xFD8
   826                           
   827 ;; *************** function _init_clcd *****************
   828 ;; Defined at:
   829 ;;		line 26 in file "clcd.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;		None
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   843 ;;      Params:         0       0       0       0       0       0       0
   844 ;;      Locals:         0       0       0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0
   846 ;;      Totals:         0       0       0       0       0       0       0
   847 ;;Total ram usage:        0 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    2
   850 ;; This function calls:
   851 ;;		_clcd_write
   852 ;; This function is called by:
   853 ;;		_init_config
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text4
   858  000B6A                     __ptext4:
   859                           	opt stack 0
   860  000B6A                     _init_clcd:
   861                           	opt stack 27
   862                           
   863                           ;clcd.c: 29: TRISD = 0x00;
   864                           
   865                           ;incstack = 0
   866  000B6A  0E00               	movlw	0
   867  000B6C  6E95               	movwf	3989,c	;volatile
   868                           
   869                           ;clcd.c: 31: TRISC = TRISC & 0xF8;
   870  000B6E  5094               	movf	3988,w,c	;volatile
   871  000B70  0BF8               	andlw	248
   872  000B72  6E94               	movwf	3988,c	;volatile
   873                           
   874                           ;clcd.c: 33: PORTCbits.RC0 = 0;
   875  000B74  9082               	bcf	3970,0,c	;volatile
   876                           
   877                           ;clcd.c: 35: clcd_write(0x02, 0);
   878  000B76  0E00               	movlw	0
   879  000B78  6E0F               	movwf	clcd_write@control_bit,c
   880  000B7A  0E02               	movlw	2
   881  000B7C  ECD0  F005         	call	_clcd_write
   882                           
   883                           ;clcd.c: 36: clcd_write(0x38, 0);
   884  000B80  0E00               	movlw	0
   885  000B82  6E0F               	movwf	clcd_write@control_bit,c
   886  000B84  0E38               	movlw	56
   887  000B86  ECD0  F005         	call	_clcd_write
   888                           
   889                           ;clcd.c: 37: clcd_write(0x0C, 0);
   890  000B8A  0E00               	movlw	0
   891  000B8C  6E0F               	movwf	clcd_write@control_bit,c
   892  000B8E  0E0C               	movlw	12
   893  000B90  ECD0  F005         	call	_clcd_write
   894                           
   895                           ;clcd.c: 38: clcd_write(0x01, 0);
   896  000B94  0E00               	movlw	0
   897  000B96  6E0F               	movwf	clcd_write@control_bit,c
   898  000B98  0E01               	movlw	1
   899  000B9A  ECD0  F005         	call	_clcd_write
   900  000B9E  0012               	return		;funcret
   901  000BA0                     __end_of_init_clcd:
   902                           	opt stack 0
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           intcon	equ	0xFF2
   908                           intcon2	equ	0xFF1
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           indf2	equ	0xFDF
   914                           fsr2h	equ	0xFDA
   915                           fsr2l	equ	0xFD9
   916                           status	equ	0xFD8
   917                           
   918 ;; *************** function _clcd_putch *****************
   919 ;; Defined at:
   920 ;;		line 50 in file "clcd.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  data            1    wreg     const unsigned char 
   923 ;;  addr            1   16[COMRAM] unsigned char 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  data            1   17[COMRAM] const unsigned char 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   935 ;;      Params:         1       0       0       0       0       0       0
   936 ;;      Locals:         1       0       0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0
   938 ;;      Totals:         2       0       0       0       0       0       0
   939 ;;Total ram usage:        2 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		_clcd_write
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text5
   950  000C08                     __ptext5:
   951                           	opt stack 0
   952  000C08                     _clcd_putch:
   953                           	opt stack 28
   954                           
   955                           ;incstack = 0
   956                           ;clcd_putch@data stored from wreg
   957  000C08  6E12               	movwf	clcd_putch@data,c
   958                           
   959                           ;clcd.c: 52: clcd_write(addr, 0);
   960  000C0A  0E00               	movlw	0
   961  000C0C  6E0F               	movwf	clcd_write@control_bit,c
   962  000C0E  5011               	movf	clcd_putch@addr,w,c
   963  000C10  ECD0  F005         	call	_clcd_write
   964                           
   965                           ;clcd.c: 53: clcd_write(data, 1);
   966  000C14  0E01               	movlw	1
   967  000C16  6E0F               	movwf	clcd_write@control_bit,c
   968  000C18  5012               	movf	clcd_putch@data,w,c
   969  000C1A  ECD0  F005         	call	_clcd_write
   970  000C1E  0012               	return		;funcret
   971  000C20                     __end_of_clcd_putch:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           intcon	equ	0xFF2
   978                           intcon2	equ	0xFF1
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postdec1	equ	0xFE5
   982                           fsr1l	equ	0xFE1
   983                           indf2	equ	0xFDF
   984                           fsr2h	equ	0xFDA
   985                           fsr2l	equ	0xFD9
   986                           status	equ	0xFD8
   987                           
   988 ;; *************** function _clcd_print *****************
   989 ;; Defined at:
   990 ;;		line 41 in file "clcd.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  data            2   16[COMRAM] PTR const unsigned char 
   993 ;;		 -> STR_3(3), STR_2(15), STR_1(17), storage_str(11), 
   994 ;;		 -> count_str(11), 
   995 ;;  addr            1   18[COMRAM] unsigned char 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;		None
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1007 ;;      Params:         3       0       0       0       0       0       0
  1008 ;;      Locals:         0       0       0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0       0
  1010 ;;      Totals:         3       0       0       0       0       0       0
  1011 ;;Total ram usage:        3 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    2
  1014 ;; This function calls:
  1015 ;;		_clcd_write
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text6
  1022  000A06                     __ptext6:
  1023                           	opt stack 0
  1024  000A06                     _clcd_print:
  1025                           	opt stack 28
  1026                           
  1027                           ;clcd.c: 43: clcd_write(addr, 0);
  1028                           
  1029                           ;incstack = 0
  1030  000A06  0E00               	movlw	0
  1031  000A08  6E0F               	movwf	clcd_write@control_bit,c
  1032  000A0A  5013               	movf	clcd_print@addr,w,c
  1033  000A0C  ECD0  F005         	call	_clcd_write
  1034                           
  1035                           ;clcd.c: 44: while (*data != '\0')
  1036  000A10  D016               	goto	l1383
  1037  000A12                     l1379:
  1038                           
  1039                           ;clcd.c: 45: {
  1040                           ;clcd.c: 46: clcd_write(*data++, 1);
  1041  000A12  0E01               	movlw	1
  1042  000A14  6E0F               	movwf	clcd_write@control_bit,c
  1043  000A16  C011  FFF6         	movff	clcd_print@data,tblptrl
  1044  000A1A  C012  FFF7         	movff	clcd_print@data+1,tblptrh
  1045  000A1E  6AF8               	clrf	tblptru,c
  1046  000A20  0E05               	movlw	(high __ramtop+-1)
  1047  000A22  64F7               	cpfsgt	tblptrh,c
  1048  000A24  D003               	bra	u777
  1049  000A26  0008               	tblrd		*
  1050  000A28  50F5               	movf	tablat,w,c
  1051  000A2A  D005               	bra	u770
  1052  000A2C                     u777:
  1053  000A2C  CFF6 FFD9          	movff	tblptrl,fsr2l
  1054  000A30  CFF7 FFDA          	movff	tblptrh,fsr2h
  1055  000A34  50DF               	movf	indf2,w,c
  1056  000A36                     u770:
  1057  000A36  ECD0  F005         	call	_clcd_write
  1058  000A3A  4A11               	infsnz	clcd_print@data,f,c
  1059  000A3C  2A12               	incf	clcd_print@data+1,f,c
  1060  000A3E                     l1383:
  1061  000A3E  C011  FFF6         	movff	clcd_print@data,tblptrl
  1062  000A42  C012  FFF7         	movff	clcd_print@data+1,tblptrh
  1063  000A46  6AF8               	clrf	tblptru,c
  1064  000A48  0E05               	movlw	(high __ramtop+-1)
  1065  000A4A  64F7               	cpfsgt	tblptrh,c
  1066  000A4C  D003               	bra	u787
  1067  000A4E  0008               	tblrd		*
  1068  000A50  50F5               	movf	tablat,w,c
  1069  000A52  D005               	bra	u780
  1070  000A54                     u787:
  1071  000A54  CFF6 FFD9          	movff	tblptrl,fsr2l
  1072  000A58  CFF7 FFDA          	movff	tblptrh,fsr2h
  1073  000A5C  50DF               	movf	indf2,w,c
  1074  000A5E                     u780:
  1075  000A5E  0900               	iorlw	0
  1076  000A60  B4D8               	btfsc	status,2,c
  1077  000A62  0012               	return	
  1078  000A64  D7D6               	goto	l1379
  1079  000A66                     __end_of_clcd_print:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           intcon	equ	0xFF2
  1086                           intcon2	equ	0xFF1
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           indf2	equ	0xFDF
  1092                           fsr2h	equ	0xFDA
  1093                           fsr2l	equ	0xFD9
  1094                           status	equ	0xFD8
  1095                           
  1096 ;; *************** function _check_matrix_keypad *****************
  1097 ;; Defined at:
  1098 ;;		line 46 in file "main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  key_edge_tri    1   25[COMRAM] unsigned char 
  1103 ;;  key_level_tr    1   24[COMRAM] unsigned char 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1113 ;;      Params:         0       0       0       0       0       0       0
  1114 ;;      Locals:         2       0       0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0
  1116 ;;      Totals:         2       0       0       0       0       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    3
  1120 ;; This function calls:
  1121 ;;		_clcd_write
  1122 ;;		_read_from_eeprom
  1123 ;;		_read_switches
  1124 ;;		_write_onto_eeprom
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text7
  1131  000738                     __ptext7:
  1132                           	opt stack 0
  1133  000738                     _check_matrix_keypad:
  1134                           	opt stack 27
  1135                           
  1136                           ;main.c: 48: unsigned char key_edge_trig = read_switches(1), key_level_trig = read_switc
      +                          hes(0);
  1137                           
  1138                           ;incstack = 0
  1139  000738  0E01               	movlw	1
  1140  00073A  EC56  F005         	call	_read_switches
  1141  00073E  6E1A               	movwf	check_matrix_keypad@key_edge_trig,c
  1142  000740  0E00               	movlw	0
  1143  000742  EC56  F005         	call	_read_switches
  1144  000746  6E19               	movwf	check_matrix_keypad@key_level_trig,c
  1145                           
  1146                           ;main.c: 50: if (display == 1 && key_edge_trig == 1)
  1147  000748  0437               	decf	_display,w,c
  1148  00074A  A4D8               	btfss	status,2,c
  1149  00074C  D006               	goto	l1401
  1150  00074E  041A               	decf	check_matrix_keypad@key_edge_trig,w,c
  1151  000750  A4D8               	btfss	status,2,c
  1152  000752  D003               	goto	l1401
  1153                           
  1154                           ;main.c: 51: write_onto_eeprom();
  1155  000754  EC33  F005         	call	_write_onto_eeprom	;wreg free
  1156  000758  0012               	return	
  1157  00075A                     l1401:
  1158                           
  1159                           ;main.c: 53: else if (display == 1 && key_level_trig == 4)
  1160  00075A  0437               	decf	_display,w,c
  1161  00075C  A4D8               	btfss	status,2,c
  1162  00075E  D01C               	goto	l1417
  1163  000760  0E04               	movlw	4
  1164  000762  1819               	xorwf	check_matrix_keypad@key_level_trig,w,c
  1165  000764  A4D8               	btfss	status,2,c
  1166  000766  D018               	goto	l1417
  1167                           
  1168                           ;main.c: 54: {
  1169                           ;main.c: 56: TMR0ON = 1;
  1170  000768  8ED5               	bsf	4053,7,c	;volatile
  1171                           
  1172                           ;main.c: 58: if (tim_count >= 30)
  1173  00076A  5024               	movf	_tim_count+1,w,c
  1174  00076C  E104               	bnz	u840
  1175  00076E  0E1E               	movlw	30
  1176  000770  5C23               	subwf	_tim_count,w,c
  1177  000772  A0D8               	btfss	status,0,c
  1178  000774  0012               	return	
  1179  000776                     u840:
  1180                           
  1181                           ;main.c: 59: {
  1182                           ;main.c: 61: TMR0ON = 0, first_change = 1;
  1183  000776  9ED5               	bcf	4053,7,c	;volatile
  1184  000778  0E01               	movlw	1
  1185  00077A  6E27               	movwf	_first_change,c
  1186                           
  1187                           ;main.c: 62: tim_count = 0;
  1188  00077C  0E00               	movlw	0
  1189  00077E  6E24               	movwf	_tim_count+1,c
  1190  000780  0E00               	movlw	0
  1191  000782  6E23               	movwf	_tim_count,c
  1192                           
  1193                           ;main.c: 64: display = 0;
  1194  000784  0E00               	movlw	0
  1195  000786  6E37               	movwf	_display,c
  1196                           
  1197                           ;main.c: 65: clcd_write(0x01, 0);
  1198  000788  0E00               	movlw	0
  1199  00078A  6E0F               	movwf	clcd_write@control_bit,c
  1200  00078C  0E01               	movlw	1
  1201  00078E  ECD0  F005         	call	_clcd_write
  1202                           
  1203                           ;main.c: 67: read_from_eeprom();
  1204  000792  ECD2  F004         	call	_read_from_eeprom	;wreg free
  1205                           
  1206                           ;main.c: 68: }
  1207                           ;main.c: 69: }
  1208  000796  0012               	return	
  1209  000798                     l1417:
  1210                           
  1211                           ;main.c: 71: else if (display == 0 && key_edge_trig == 4)
  1212  000798  5037               	movf	_display,w,c
  1213  00079A  A4D8               	btfss	status,2,c
  1214  00079C  D018               	goto	l1431
  1215  00079E  0E04               	movlw	4
  1216  0007A0  181A               	xorwf	check_matrix_keypad@key_edge_trig,w,c
  1217  0007A2  A4D8               	btfss	status,2,c
  1218  0007A4  D014               	goto	l1431
  1219                           
  1220                           ;main.c: 72: {
  1221                           ;main.c: 75: if (!first_change && ++disp_num == 11)
  1222  0007A6  5027               	movf	_first_change,w,c
  1223  0007A8  A4D8               	btfss	status,2,c
  1224  0007AA  D007               	goto	l124
  1225  0007AC  2A36               	incf	_disp_num,f,c
  1226  0007AE  0E0B               	movlw	11
  1227  0007B0  1836               	xorwf	_disp_num,w,c
  1228  0007B2  A4D8               	btfss	status,2,c
  1229  0007B4  D002               	goto	l124
  1230                           
  1231                           ;main.c: 76: disp_num = 1;
  1232  0007B6  0E01               	movlw	1
  1233  0007B8  6E36               	movwf	_disp_num,c
  1234  0007BA                     l124:
  1235                           
  1236                           ;main.c: 78: first_change = 0;
  1237  0007BA  0E00               	movlw	0
  1238  0007BC  6E27               	movwf	_first_change,c
  1239                           
  1240                           ;main.c: 80: read_from_eeprom();
  1241  0007BE  ECD2  F004         	call	_read_from_eeprom	;wreg free
  1242                           
  1243                           ;main.c: 82: clcd_write(0x01, 0);
  1244  0007C2  0E00               	movlw	0
  1245  0007C4  6E0F               	movwf	clcd_write@control_bit,c
  1246  0007C6  0E01               	movlw	1
  1247  0007C8  ECD0  F005         	call	_clcd_write
  1248                           
  1249                           ;main.c: 83: }
  1250  0007CC  0012               	return	
  1251  0007CE                     l1431:
  1252                           
  1253                           ;main.c: 85: else if (display == 0 && key_edge_trig == 7)
  1254  0007CE  5037               	movf	_display,w,c
  1255  0007D0  A4D8               	btfss	status,2,c
  1256  0007D2  D010               	goto	l1443
  1257  0007D4  0E07               	movlw	7
  1258  0007D6  181A               	xorwf	check_matrix_keypad@key_edge_trig,w,c
  1259  0007D8  A4D8               	btfss	status,2,c
  1260  0007DA  D00C               	goto	l1443
  1261                           
  1262                           ;main.c: 86: {
  1263                           ;main.c: 88: if (--disp_num == 0)
  1264  0007DC  2E36               	decfsz	_disp_num,f,c
  1265  0007DE  D002               	goto	l1439
  1266                           
  1267                           ;main.c: 89: disp_num = 10;
  1268  0007E0  0E0A               	movlw	10
  1269  0007E2  6E36               	movwf	_disp_num,c
  1270  0007E4                     l1439:
  1271                           
  1272                           ;main.c: 91: read_from_eeprom();
  1273  0007E4  ECD2  F004         	call	_read_from_eeprom	;wreg free
  1274                           
  1275                           ;main.c: 93: clcd_write(0x01, 0);
  1276  0007E8  0E00               	movlw	0
  1277  0007EA  6E0F               	movwf	clcd_write@control_bit,c
  1278  0007EC  0E01               	movlw	1
  1279  0007EE  ECD0  F005         	call	_clcd_write
  1280                           
  1281                           ;main.c: 94: }
  1282  0007F2  0012               	return	
  1283  0007F4                     l1443:
  1284                           
  1285                           ;main.c: 96: else if (display == 0 && key_level_trig == 7)
  1286  0007F4  5037               	movf	_display,w,c
  1287  0007F6  A4D8               	btfss	status,2,c
  1288  0007F8  D01A               	goto	l1459
  1289  0007FA  0E07               	movlw	7
  1290  0007FC  1819               	xorwf	check_matrix_keypad@key_level_trig,w,c
  1291  0007FE  A4D8               	btfss	status,2,c
  1292  000800  D016               	goto	l1459
  1293                           
  1294                           ;main.c: 97: {
  1295                           ;main.c: 99: TMR0ON = 1;
  1296  000802  8ED5               	bsf	4053,7,c	;volatile
  1297                           
  1298                           ;main.c: 101: if (tim_count >= 30)
  1299  000804  5024               	movf	_tim_count+1,w,c
  1300  000806  E104               	bnz	u930
  1301  000808  0E1E               	movlw	30
  1302  00080A  5C23               	subwf	_tim_count,w,c
  1303  00080C  A0D8               	btfss	status,0,c
  1304  00080E  0012               	return	
  1305  000810                     u930:
  1306                           
  1307                           ;main.c: 102: {
  1308                           ;main.c: 104: TMR0ON = 0;
  1309  000810  9ED5               	bcf	4053,7,c	;volatile
  1310                           
  1311                           ;main.c: 105: tim_count = 0, disp_num = 1;
  1312  000812  0E00               	movlw	0
  1313  000814  6E24               	movwf	_tim_count+1,c
  1314  000816  0E00               	movlw	0
  1315  000818  6E23               	movwf	_tim_count,c
  1316  00081A  0E01               	movlw	1
  1317  00081C  6E36               	movwf	_disp_num,c
  1318                           
  1319                           ;main.c: 107: clcd_write(0x01, 0);
  1320  00081E  0E00               	movlw	0
  1321  000820  6E0F               	movwf	clcd_write@control_bit,c
  1322  000822  0E01               	movlw	1
  1323  000824  ECD0  F005         	call	_clcd_write
  1324                           
  1325                           ;main.c: 109: display = 1;
  1326  000828  0E01               	movlw	1
  1327  00082A  6E37               	movwf	_display,c
  1328                           
  1329                           ;main.c: 110: }
  1330                           ;main.c: 111: }
  1331  00082C  0012               	return	
  1332  00082E                     l1459:
  1333                           
  1334                           ;main.c: 112: else
  1335                           ;main.c: 113: tim_count = 0;
  1336  00082E  0E00               	movlw	0
  1337  000830  6E24               	movwf	_tim_count+1,c
  1338  000832  0E00               	movlw	0
  1339  000834  6E23               	movwf	_tim_count,c
  1340  000836  0012               	return	
  1341  000838                     __end_of_check_matrix_keypad:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           intcon	equ	0xFF2
  1348                           intcon2	equ	0xFF1
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec1	equ	0xFE5
  1352                           fsr1l	equ	0xFE1
  1353                           indf2	equ	0xFDF
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _write_onto_eeprom *****************
  1359 ;; Defined at:
  1360 ;;		line 20 in file "main.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  i               2   22[COMRAM] unsigned short 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1374 ;;      Params:         0       0       0       0       0       0       0
  1375 ;;      Locals:         2       0       0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0
  1377 ;;      Totals:         2       0       0       0       0       0       0
  1378 ;;Total ram usage:        2 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    2
  1381 ;; This function calls:
  1382 ;;		___awmod
  1383 ;;		_write_internal_eeprom
  1384 ;; This function is called by:
  1385 ;;		_check_matrix_keypad
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text8
  1390  000A66                     __ptext8:
  1391                           	opt stack 0
  1392  000A66                     _write_onto_eeprom:
  1393                           	opt stack 27
  1394                           
  1395                           ;main.c: 22: for (unsigned short i = 0; i < 10; i++)
  1396                           
  1397                           ;incstack = 0
  1398  000A66  0E00               	movlw	0
  1399  000A68  6E18               	movwf	write_onto_eeprom@i+1,c
  1400  000A6A  0E00               	movlw	0
  1401  000A6C  6E17               	movwf	write_onto_eeprom@i,c
  1402  000A6E                     l1349:
  1403  000A6E  5018               	movf	write_onto_eeprom@i+1,w,c
  1404  000A70  E11C               	bnz	l110
  1405  000A72  0E0A               	movlw	10
  1406  000A74  5C17               	subwf	write_onto_eeprom@i,w,c
  1407  000A76  B0D8               	btfsc	status,0,c
  1408  000A78  0012               	return	
  1409                           
  1410                           ;main.c: 23: {
  1411                           ;main.c: 25: write_internal_eeprom((eeprom_addr++) % 100, count_str[i]);
  1412  000A7A  0E39               	movlw	low _count_str
  1413  000A7C  2417               	addwf	write_onto_eeprom@i,w,c
  1414  000A7E  6ED9               	movwf	fsr2l,c
  1415  000A80  0E00               	movlw	high _count_str
  1416  000A82  2018               	addwfc	write_onto_eeprom@i+1,w,c
  1417  000A84  6EDA               	movwf	fsr2h,c
  1418  000A86  50DF               	movf	indf2,w,c
  1419  000A88  6E15               	movwf	write_internal_eeprom@data,c
  1420  000A8A  C026  F00F         	movff	_eeprom_addr,___awmod@dividend
  1421  000A8E  6A10               	clrf	___awmod@dividend+1,c
  1422  000A90  0E00               	movlw	0
  1423  000A92  6E12               	movwf	___awmod@divisor+1,c
  1424  000A94  0E64               	movlw	100
  1425  000A96  6E11               	movwf	___awmod@divisor,c
  1426  000A98  EC9A  F004         	call	___awmod	;wreg free
  1427  000A9C  500F               	movf	?___awmod,w,c
  1428  000A9E  ECE4  F005         	call	_write_internal_eeprom
  1429  000AA2  2A26               	incf	_eeprom_addr,f,c
  1430  000AA4  4A17               	infsnz	write_onto_eeprom@i,f,c
  1431  000AA6  2A18               	incf	write_onto_eeprom@i+1,f,c
  1432  000AA8  D7E2               	goto	l1349
  1433  000AAA                     l110:
  1434  000AAA  0012               	return		;funcret
  1435  000AAC                     __end_of_write_onto_eeprom:
  1436                           	opt stack 0
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           intcon	equ	0xFF2
  1442                           intcon2	equ	0xFF1
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1l	equ	0xFE1
  1447                           indf2	equ	0xFDF
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function _write_internal_eeprom *****************
  1453 ;; Defined at:
  1454 ;;		line 3 in file "eeprom.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  address         1    wreg     unsigned char 
  1457 ;;  data            1   20[COMRAM] unsigned char 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  address         1   21[COMRAM] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      void 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1469 ;;      Params:         1       0       0       0       0       0       0
  1470 ;;      Locals:         1       0       0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0
  1472 ;;      Totals:         2       0       0       0       0       0       0
  1473 ;;Total ram usage:        2 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_write_onto_eeprom
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text9
  1484  000BC8                     __ptext9:
  1485                           	opt stack 0
  1486  000BC8                     _write_internal_eeprom:
  1487                           	opt stack 27
  1488                           
  1489                           ;incstack = 0
  1490                           ;write_internal_eeprom@address stored from wreg
  1491  000BC8  6E16               	movwf	write_internal_eeprom@address,c
  1492                           
  1493                           ;eeprom.c: 6: EEADR = address;
  1494  000BCA  C016  FFA9         	movff	write_internal_eeprom@address,4009	;volatile
  1495                           
  1496                           ;eeprom.c: 9: EEDATA = data;
  1497  000BCE  C015  FFA8         	movff	write_internal_eeprom@data,4008	;volatile
  1498                           
  1499                           ;eeprom.c: 12: EECON1bits.EEPGD = 0;
  1500  000BD2  9EA6               	bcf	4006,7,c	;volatile
  1501                           
  1502                           ;eeprom.c: 15: EECON1bits.CFGS = 0;
  1503  000BD4  9CA6               	bcf	4006,6,c	;volatile
  1504                           
  1505                           ;eeprom.c: 18: EECON1bits.WREN = 1;
  1506  000BD6  84A6               	bsf	4006,2,c	;volatile
  1507                           
  1508                           ;eeprom.c: 21: GIE = 0;
  1509  000BD8  9EF2               	bcf	intcon,7,c	;volatile
  1510                           
  1511                           ;eeprom.c: 24: EECON2 = 0x55;
  1512  000BDA  0E55               	movlw	85
  1513  000BDC  6EA7               	movwf	4007,c	;volatile
  1514                           
  1515                           ;eeprom.c: 25: EECON2 = 0xAA;
  1516  000BDE  0EAA               	movlw	170
  1517  000BE0  6EA7               	movwf	4007,c	;volatile
  1518                           
  1519                           ;eeprom.c: 28: EECON1bits.WR = 1;
  1520  000BE2  82A6               	bsf	4006,1,c	;volatile
  1521                           
  1522                           ;eeprom.c: 31: GIE = 1;
  1523  000BE4  8EF2               	bsf	intcon,7,c	;volatile
  1524  000BE6                     l217:
  1525  000BE6  A8A1               	btfss	4001,4,c	;volatile
  1526  000BE8  D7FE               	goto	l217
  1527                           
  1528                           ;eeprom.c: 37: PIR2bits.EEIF = 0;
  1529  000BEA  98A1               	bcf	4001,4,c	;volatile
  1530  000BEC  0012               	return		;funcret
  1531  000BEE                     __end_of_write_internal_eeprom:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           intcon	equ	0xFF2
  1538                           intcon2	equ	0xFF1
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           indf2	equ	0xFDF
  1544                           fsr2h	equ	0xFDA
  1545                           fsr2l	equ	0xFD9
  1546                           status	equ	0xFD8
  1547                           
  1548 ;; *************** function ___awmod *****************
  1549 ;; Defined at:
  1550 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/awmod.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  dividend        2   14[COMRAM] int 
  1553 ;;  divisor         2   16[COMRAM] int 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  sign            1   19[COMRAM] unsigned char 
  1556 ;;  counter         1   18[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  2   14[COMRAM] int 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1566 ;;      Params:         4       0       0       0       0       0       0
  1567 ;;      Locals:         2       0       0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0
  1569 ;;      Totals:         6       0       0       0       0       0       0
  1570 ;;Total ram usage:        6 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    1
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_write_onto_eeprom
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text10
  1581  000934                     __ptext10:
  1582                           	opt stack 0
  1583  000934                     ___awmod:
  1584                           	opt stack 27
  1585                           
  1586                           ;incstack = 0
  1587  000934  0E00               	movlw	0
  1588  000936  6E14               	movwf	___awmod@sign,c
  1589  000938  AE10               	btfss	___awmod@dividend+1,7,c
  1590  00093A  D006               	goto	l1289
  1591  00093C  6C0F               	negf	___awmod@dividend,c
  1592  00093E  1E10               	comf	___awmod@dividend+1,f,c
  1593  000940  B0D8               	btfsc	status,0,c
  1594  000942  2A10               	incf	___awmod@dividend+1,f,c
  1595  000944  0E01               	movlw	1
  1596  000946  6E14               	movwf	___awmod@sign,c
  1597  000948                     l1289:
  1598  000948  AE12               	btfss	___awmod@divisor+1,7,c
  1599  00094A  D004               	goto	l1293
  1600  00094C  6C11               	negf	___awmod@divisor,c
  1601  00094E  1E12               	comf	___awmod@divisor+1,f,c
  1602  000950  B0D8               	btfsc	status,0,c
  1603  000952  2A12               	incf	___awmod@divisor+1,f,c
  1604  000954                     l1293:
  1605  000954  5011               	movf	___awmod@divisor,w,c
  1606  000956  1012               	iorwf	___awmod@divisor+1,w,c
  1607  000958  B4D8               	btfsc	status,2,c
  1608  00095A  D018               	goto	l1309
  1609  00095C  0E01               	movlw	1
  1610  00095E  6E13               	movwf	___awmod@counter,c
  1611  000960  D004               	goto	l1299
  1612  000962                     l1297:
  1613  000962  90D8               	bcf	status,0,c
  1614  000964  3611               	rlcf	___awmod@divisor,f,c
  1615  000966  3612               	rlcf	___awmod@divisor+1,f,c
  1616  000968  2A13               	incf	___awmod@counter,f,c
  1617  00096A                     l1299:
  1618  00096A  AE12               	btfss	___awmod@divisor+1,7,c
  1619  00096C  D7FA               	goto	l1297
  1620  00096E                     l1301:
  1621  00096E  5011               	movf	___awmod@divisor,w,c
  1622  000970  5C0F               	subwf	___awmod@dividend,w,c
  1623  000972  5012               	movf	___awmod@divisor+1,w,c
  1624  000974  5810               	subwfb	___awmod@dividend+1,w,c
  1625  000976  A0D8               	btfss	status,0,c
  1626  000978  D004               	goto	l1305
  1627  00097A  5011               	movf	___awmod@divisor,w,c
  1628  00097C  5E0F               	subwf	___awmod@dividend,f,c
  1629  00097E  5012               	movf	___awmod@divisor+1,w,c
  1630  000980  5A10               	subwfb	___awmod@dividend+1,f,c
  1631  000982                     l1305:
  1632  000982  90D8               	bcf	status,0,c
  1633  000984  3212               	rrcf	___awmod@divisor+1,f,c
  1634  000986  3211               	rrcf	___awmod@divisor,f,c
  1635  000988  2E13               	decfsz	___awmod@counter,f,c
  1636  00098A  D7F1               	goto	l1301
  1637  00098C                     l1309:
  1638  00098C  5014               	movf	___awmod@sign,w,c
  1639  00098E  B4D8               	btfsc	status,2,c
  1640  000990  D004               	goto	l1313
  1641  000992  6C0F               	negf	___awmod@dividend,c
  1642  000994  1E10               	comf	___awmod@dividend+1,f,c
  1643  000996  B0D8               	btfsc	status,0,c
  1644  000998  2A10               	incf	___awmod@dividend+1,f,c
  1645  00099A                     l1313:
  1646  00099A  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1647  00099E  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1648  0009A2  0012               	return	
  1649  0009A4                     __end_of___awmod:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           intcon	equ	0xFF2
  1656                           intcon2	equ	0xFF1
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           indf2	equ	0xFDF
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _read_switches *****************
  1667 ;; Defined at:
  1668 ;;		line 88 in file "matrix_keypad.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  detection_ty    1    wreg     unsigned char 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  detection_ty    1   14[COMRAM] unsigned char 
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      unsigned char 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1682 ;;      Params:         0       0       0       0       0       0       0
  1683 ;;      Locals:         1       0       0       0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0
  1685 ;;      Totals:         1       0       0       0       0       0       0
  1686 ;;Total ram usage:        1 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    2
  1689 ;; This function calls:
  1690 ;;		_scan_key
  1691 ;; This function is called by:
  1692 ;;		_check_matrix_keypad
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text11
  1697  000AAC                     __ptext11:
  1698                           	opt stack 0
  1699  000AAC                     _read_switches:
  1700                           	opt stack 27
  1701                           
  1702                           ;incstack = 0
  1703                           ;read_switches@detection_type stored from wreg
  1704  000AAC  6E0F               	movwf	read_switches@detection_type,c
  1705                           
  1706                           ;matrix_keypad.c: 90: static unsigned char once = 1, key, key_state;
  1707                           ;matrix_keypad.c: 92: if (detection_type == 1)
  1708  000AAE  040F               	decf	read_switches@detection_type,w,c
  1709  000AB0  A4D8               	btfss	status,2,c
  1710  000AB2  D015               	goto	l1093
  1711                           
  1712                           ;matrix_keypad.c: 93: {
  1713                           ;matrix_keypad.c: 94: key = scan_key();
  1714  000AB4  EC5E  F004         	call	_scan_key	;wreg free
  1715  000AB8  6E29               	movwf	read_switches@key,c
  1716                           
  1717                           ;matrix_keypad.c: 95: if(key == 0xFF && once)
  1718  000ABA  2829               	incf	read_switches@key,w,c
  1719  000ABC  A4D8               	btfss	status,2,c
  1720  000ABE  D007               	goto	l1087
  1721  000AC0  5038               	movf	read_switches@once,w,c
  1722  000AC2  B4D8               	btfsc	status,2,c
  1723  000AC4  D004               	goto	l1087
  1724                           
  1725                           ;matrix_keypad.c: 96: {
  1726                           ;matrix_keypad.c: 97: once = 0;
  1727  000AC6  0E00               	movlw	0
  1728  000AC8  6E38               	movwf	read_switches@once,c
  1729                           
  1730                           ;matrix_keypad.c: 98: return key_state;
  1731  000ACA  502A               	movf	read_switches@key_state,w,c
  1732  000ACC  0012               	return	
  1733  000ACE                     l1087:
  1734                           
  1735                           ;matrix_keypad.c: 100: else if(key != 0xFF)
  1736  000ACE  2829               	incf	read_switches@key,w,c
  1737  000AD0  B4D8               	btfsc	status,2,c
  1738  000AD2  D00B               	goto	l1099
  1739                           
  1740                           ;matrix_keypad.c: 101: {
  1741                           ;matrix_keypad.c: 102: once = 1;
  1742  000AD4  0E01               	movlw	1
  1743  000AD6  6E38               	movwf	read_switches@once,c
  1744                           
  1745                           ;matrix_keypad.c: 103: key_state = key;
  1746  000AD8  C029  F02A         	movff	read_switches@key,read_switches@key_state
  1747                           
  1748                           ;matrix_keypad.c: 104: }
  1749                           ;matrix_keypad.c: 105: }
  1750  000ADC  D006               	goto	l1099
  1751  000ADE                     l1093:
  1752                           
  1753                           ;matrix_keypad.c: 106: else if (detection_type == 0)
  1754  000ADE  500F               	movf	read_switches@detection_type,w,c
  1755  000AE0  A4D8               	btfss	status,2,c
  1756  000AE2  D003               	goto	l1099
  1757                           
  1758                           ;matrix_keypad.c: 107: {
  1759                           ;matrix_keypad.c: 108: return scan_key();
  1760  000AE4  EC5E  F004         	call	_scan_key	;wreg free
  1761  000AE8  0012               	return	
  1762  000AEA                     l1099:
  1763                           
  1764                           ;matrix_keypad.c: 109: }
  1765                           ;matrix_keypad.c: 111: return 0xFF;
  1766  000AEA  0EFF               	movlw	255
  1767  000AEC  0012               	return	
  1768  000AEE                     __end_of_read_switches:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           intcon	equ	0xFF2
  1775                           intcon2	equ	0xFF1
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           indf2	equ	0xFDF
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _scan_key *****************
  1786 ;; Defined at:
  1787 ;;		line 18 in file "matrix_keypad.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      unsigned char 
  1794 ;; Registers used:
  1795 ;;		wreg
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1801 ;;      Params:         0       0       0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0
  1804 ;;      Totals:         0       0       0       0       0       0       0
  1805 ;;Total ram usage:        0 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_read_switches
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text12
  1816  0008BC                     __ptext12:
  1817                           	opt stack 0
  1818  0008BC                     _scan_key:
  1819                           	opt stack 27
  1820                           
  1821                           ;matrix_keypad.c: 20: PORTBbits.RB5 = 0;
  1822                           
  1823                           ;incstack = 0
  1824  0008BC  9A81               	bcf	3969,5,c	;volatile
  1825                           
  1826                           ;matrix_keypad.c: 21: PORTBbits.RB6 = 1;
  1827  0008BE  8C81               	bsf	3969,6,c	;volatile
  1828                           
  1829                           ;matrix_keypad.c: 22: PORTBbits.RB7 = 1;
  1830  0008C0  8E81               	bsf	3969,7,c	;volatile
  1831                           
  1832                           ;matrix_keypad.c: 24: if (PORTBbits.RB1 == 0)
  1833  0008C2  B281               	btfsc	3969,1,c	;volatile
  1834  0008C4  D002               	goto	l166
  1835                           
  1836                           ;matrix_keypad.c: 25: {
  1837                           ;matrix_keypad.c: 26: return 1;
  1838  0008C6  0E01               	movlw	1
  1839  0008C8  0012               	return	
  1840  0008CA                     l166:
  1841                           
  1842                           ;matrix_keypad.c: 28: else if (PORTBbits.RB2 == 0)
  1843  0008CA  B481               	btfsc	3969,2,c	;volatile
  1844  0008CC  D002               	goto	l169
  1845                           
  1846                           ;matrix_keypad.c: 29: {
  1847                           ;matrix_keypad.c: 30: return 4;
  1848  0008CE  0E04               	movlw	4
  1849  0008D0  0012               	return	
  1850  0008D2                     l169:
  1851                           
  1852                           ;matrix_keypad.c: 32: else if (PORTBbits.RB3 == 0)
  1853  0008D2  B681               	btfsc	3969,3,c	;volatile
  1854  0008D4  D002               	goto	l171
  1855                           
  1856                           ;matrix_keypad.c: 33: {
  1857                           ;matrix_keypad.c: 34: return 7;
  1858  0008D6  0E07               	movlw	7
  1859  0008D8  0012               	return	
  1860  0008DA                     l171:
  1861                           
  1862                           ;matrix_keypad.c: 36: else if (PORTBbits.RB4 == 0)
  1863  0008DA  B881               	btfsc	3969,4,c	;volatile
  1864  0008DC  D002               	goto	l168
  1865                           
  1866                           ;matrix_keypad.c: 37: {
  1867                           ;matrix_keypad.c: 38: return 10;
  1868  0008DE  0E0A               	movlw	10
  1869  0008E0  0012               	return	
  1870  0008E2                     l168:
  1871                           
  1872                           ;matrix_keypad.c: 39: }
  1873                           ;matrix_keypad.c: 41: PORTBbits.RB5 = 1;
  1874  0008E2  8A81               	bsf	3969,5,c	;volatile
  1875                           
  1876                           ;matrix_keypad.c: 42: PORTBbits.RB6 = 0;
  1877  0008E4  9C81               	bcf	3969,6,c	;volatile
  1878                           
  1879                           ;matrix_keypad.c: 43: PORTBbits.RB7 = 1;
  1880  0008E6  8E81               	bsf	3969,7,c	;volatile
  1881                           
  1882                           ;matrix_keypad.c: 45: if (PORTBbits.RB1 == 0)
  1883  0008E8  B281               	btfsc	3969,1,c	;volatile
  1884  0008EA  D002               	goto	l174
  1885                           
  1886                           ;matrix_keypad.c: 46: {
  1887                           ;matrix_keypad.c: 47: return 2;
  1888  0008EC  0E02               	movlw	2
  1889  0008EE  0012               	return	
  1890  0008F0                     l174:
  1891                           
  1892                           ;matrix_keypad.c: 49: else if (PORTBbits.RB2 == 0)
  1893  0008F0  B481               	btfsc	3969,2,c	;volatile
  1894  0008F2  D002               	goto	l176
  1895                           
  1896                           ;matrix_keypad.c: 50: {
  1897                           ;matrix_keypad.c: 51: return 5;
  1898  0008F4  0E05               	movlw	5
  1899  0008F6  0012               	return	
  1900  0008F8                     l176:
  1901                           
  1902                           ;matrix_keypad.c: 53: else if (PORTBbits.RB3 == 0)
  1903  0008F8  B681               	btfsc	3969,3,c	;volatile
  1904  0008FA  D002               	goto	l178
  1905                           
  1906                           ;matrix_keypad.c: 54: {
  1907                           ;matrix_keypad.c: 55: return 8;
  1908  0008FC  0E08               	movlw	8
  1909  0008FE  0012               	return	
  1910  000900                     l178:
  1911                           
  1912                           ;matrix_keypad.c: 57: else if (PORTBbits.RB4 == 0)
  1913  000900  B881               	btfsc	3969,4,c	;volatile
  1914  000902  D002               	goto	l175
  1915                           
  1916                           ;matrix_keypad.c: 58: {
  1917                           ;matrix_keypad.c: 59: return 11;
  1918  000904  0E0B               	movlw	11
  1919  000906  0012               	return	
  1920  000908                     l175:
  1921                           
  1922                           ;matrix_keypad.c: 60: }
  1923                           ;matrix_keypad.c: 62: PORTBbits.RB5 = 1;
  1924  000908  8A81               	bsf	3969,5,c	;volatile
  1925                           
  1926                           ;matrix_keypad.c: 63: PORTBbits.RB6 = 1;
  1927  00090A  8C81               	bsf	3969,6,c	;volatile
  1928                           
  1929                           ;matrix_keypad.c: 64: PORTBbits.RB7 = 0;
  1930  00090C  9E81               	bcf	3969,7,c	;volatile
  1931                           
  1932                           ;matrix_keypad.c: 66: PORTBbits.RB7 = 0;
  1933  00090E  9E81               	bcf	3969,7,c	;volatile
  1934                           
  1935                           ;matrix_keypad.c: 68: if (PORTBbits.RB1 == 0)
  1936  000910  B281               	btfsc	3969,1,c	;volatile
  1937  000912  D002               	goto	l181
  1938                           
  1939                           ;matrix_keypad.c: 69: {
  1940                           ;matrix_keypad.c: 70: return 3;
  1941  000914  0E03               	movlw	3
  1942  000916  0012               	return	
  1943  000918                     l181:
  1944                           
  1945                           ;matrix_keypad.c: 72: else if (PORTBbits.RB2 == 0)
  1946  000918  B481               	btfsc	3969,2,c	;volatile
  1947  00091A  D002               	goto	l183
  1948                           
  1949                           ;matrix_keypad.c: 73: {
  1950                           ;matrix_keypad.c: 74: return 6;
  1951  00091C  0E06               	movlw	6
  1952  00091E  0012               	return	
  1953  000920                     l183:
  1954                           
  1955                           ;matrix_keypad.c: 76: else if (PORTBbits.RB3 == 0)
  1956  000920  B681               	btfsc	3969,3,c	;volatile
  1957  000922  D002               	goto	l185
  1958                           
  1959                           ;matrix_keypad.c: 77: {
  1960                           ;matrix_keypad.c: 78: return 9;
  1961  000924  0E09               	movlw	9
  1962  000926  0012               	return	
  1963  000928                     l185:
  1964                           
  1965                           ;matrix_keypad.c: 80: else if (PORTBbits.RB4 == 0)
  1966  000928  B881               	btfsc	3969,4,c	;volatile
  1967  00092A  D002               	goto	l959
  1968                           
  1969                           ;matrix_keypad.c: 81: {
  1970                           ;matrix_keypad.c: 82: return 12;
  1971  00092C  0E0C               	movlw	12
  1972  00092E  0012               	return	
  1973  000930                     l959:
  1974                           
  1975                           ;matrix_keypad.c: 83: }
  1976                           ;matrix_keypad.c: 85: return 0xFF;
  1977  000930  0EFF               	movlw	255
  1978  000932  0012               	return	
  1979  000934                     __end_of_scan_key:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           intcon	equ	0xFF2
  1986                           intcon2	equ	0xFF1
  1987                           postinc0	equ	0xFEE
  1988                           wreg	equ	0xFE8
  1989                           postdec1	equ	0xFE5
  1990                           fsr1l	equ	0xFE1
  1991                           indf2	equ	0xFDF
  1992                           fsr2h	equ	0xFDA
  1993                           fsr2l	equ	0xFD9
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _read_from_eeprom *****************
  1997 ;; Defined at:
  1998 ;;		line 30 in file "main.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  i               2   19[COMRAM] unsigned short 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2012 ;;      Params:         0       0       0       0       0       0       0
  2013 ;;      Locals:         2       0       0       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0
  2015 ;;      Totals:         2       0       0       0       0       0       0
  2016 ;;Total ram usage:        2 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    2
  2019 ;; This function calls:
  2020 ;;		___lwmod
  2021 ;;		_read_internal_eeprom
  2022 ;; This function is called by:
  2023 ;;		_check_matrix_keypad
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text13
  2028  0009A4                     __ptext13:
  2029                           	opt stack 0
  2030  0009A4                     _read_from_eeprom:
  2031                           	opt stack 27
  2032                           
  2033                           ;main.c: 33: unsigned short i;
  2034                           ;main.c: 35: read_addr = disp_num * 10 - 10;
  2035                           
  2036                           ;incstack = 0
  2037  0009A4  5036               	movf	_disp_num,w,c
  2038  0009A6  0D0A               	mullw	10
  2039  0009A8  50F3               	movf	prodl,w,c
  2040  0009AA  0FF6               	addlw	246
  2041  0009AC  6E28               	movwf	_read_addr,c
  2042                           
  2043                           ;main.c: 36: for (i = 0; i < 10; i++)
  2044  0009AE  0E00               	movlw	0
  2045  0009B0  6E15               	movwf	read_from_eeprom@i+1,c
  2046  0009B2  0E00               	movlw	0
  2047  0009B4  6E14               	movwf	read_from_eeprom@i,c
  2048  0009B6                     l1365:
  2049  0009B6  5015               	movf	read_from_eeprom@i+1,w,c
  2050  0009B8  E11D               	bnz	l1375
  2051  0009BA  0E0A               	movlw	10
  2052  0009BC  5C14               	subwf	read_from_eeprom@i,w,c
  2053  0009BE  B0D8               	btfsc	status,0,c
  2054  0009C0  D019               	goto	l1375
  2055                           
  2056                           ;main.c: 37: {
  2057                           ;main.c: 39: storage_str[i] = read_internal_eeprom((read_addr + i) % 100);
  2058  0009C2  0E2B               	movlw	low _storage_str
  2059  0009C4  2414               	addwf	read_from_eeprom@i,w,c
  2060  0009C6  6ED9               	movwf	fsr2l,c
  2061  0009C8  0E00               	movlw	high _storage_str
  2062  0009CA  2015               	addwfc	read_from_eeprom@i+1,w,c
  2063  0009CC  6EDA               	movwf	fsr2h,c
  2064  0009CE  5028               	movf	_read_addr,w,c
  2065  0009D0  2414               	addwf	read_from_eeprom@i,w,c
  2066  0009D2  6E0F               	movwf	___lwmod@dividend,c
  2067  0009D4  0E00               	movlw	0
  2068  0009D6  2015               	addwfc	read_from_eeprom@i+1,w,c
  2069  0009D8  6E10               	movwf	___lwmod@dividend+1,c
  2070  0009DA  0E00               	movlw	0
  2071  0009DC  6E12               	movwf	___lwmod@divisor+1,c
  2072  0009DE  0E64               	movlw	100
  2073  0009E0  6E11               	movwf	___lwmod@divisor,c
  2074  0009E2  EC77  F005         	call	___lwmod	;wreg free
  2075  0009E6  500F               	movf	?___lwmod,w,c
  2076  0009E8  EC19  F006         	call	_read_internal_eeprom
  2077  0009EC  6EDF               	movwf	indf2,c
  2078  0009EE  4A14               	infsnz	read_from_eeprom@i,f,c
  2079  0009F0  2A15               	incf	read_from_eeprom@i+1,f,c
  2080  0009F2  D7E1               	goto	l1365
  2081  0009F4                     l1375:
  2082                           
  2083                           ;main.c: 40: }
  2084                           ;main.c: 42: storage_str[i] = '\0';
  2085  0009F4  0E2B               	movlw	low _storage_str
  2086  0009F6  2414               	addwf	read_from_eeprom@i,w,c
  2087  0009F8  6ED9               	movwf	fsr2l,c
  2088  0009FA  0E00               	movlw	high _storage_str
  2089  0009FC  2015               	addwfc	read_from_eeprom@i+1,w,c
  2090  0009FE  6EDA               	movwf	fsr2h,c
  2091  000A00  0E00               	movlw	0
  2092  000A02  6EDF               	movwf	indf2,c
  2093  000A04  0012               	return		;funcret
  2094  000A06                     __end_of_read_from_eeprom:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodl	equ	0xFF3
  2101                           intcon	equ	0xFF2
  2102                           intcon2	equ	0xFF1
  2103                           postinc0	equ	0xFEE
  2104                           wreg	equ	0xFE8
  2105                           postdec1	equ	0xFE5
  2106                           fsr1l	equ	0xFE1
  2107                           indf2	equ	0xFDF
  2108                           fsr2h	equ	0xFDA
  2109                           fsr2l	equ	0xFD9
  2110                           status	equ	0xFD8
  2111                           
  2112 ;; *************** function _read_internal_eeprom *****************
  2113 ;; Defined at:
  2114 ;;		line 40 in file "eeprom.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;  address         1    wreg     unsigned char 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  address         1   14[COMRAM] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      unsigned char 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2128 ;;      Params:         0       0       0       0       0       0       0
  2129 ;;      Locals:         1       0       0       0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0       0       0
  2131 ;;      Totals:         1       0       0       0       0       0       0
  2132 ;;Total ram usage:        1 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    1
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_read_from_eeprom
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text14
  2143  000C32                     __ptext14:
  2144                           	opt stack 0
  2145  000C32                     _read_internal_eeprom:
  2146                           	opt stack 27
  2147                           
  2148                           ;incstack = 0
  2149                           ;read_internal_eeprom@address stored from wreg
  2150  000C32  6E0F               	movwf	read_internal_eeprom@address,c
  2151                           
  2152                           ;eeprom.c: 43: EEADR = address;
  2153  000C34  C00F  FFA9         	movff	read_internal_eeprom@address,4009	;volatile
  2154                           
  2155                           ;eeprom.c: 46: EECON1bits.WREN = 0;
  2156  000C38  94A6               	bcf	4006,2,c	;volatile
  2157                           
  2158                           ;eeprom.c: 49: EECON1bits.EEPGD = 0;
  2159  000C3A  9EA6               	bcf	4006,7,c	;volatile
  2160                           
  2161                           ;eeprom.c: 52: EECON1bits.CFGS = 0;
  2162  000C3C  9CA6               	bcf	4006,6,c	;volatile
  2163                           
  2164                           ;eeprom.c: 55: EECON1bits.RD = 1;
  2165  000C3E  80A6               	bsf	4006,0,c	;volatile
  2166                           
  2167                           ;eeprom.c: 58: return EEDATA;
  2168  000C40  50A8               	movf	4008,w,c	;volatile
  2169  000C42  0012               	return	
  2170  000C44                     __end_of_read_internal_eeprom:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodl	equ	0xFF3
  2177                           intcon	equ	0xFF2
  2178                           intcon2	equ	0xFF1
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1l	equ	0xFE1
  2183                           indf2	equ	0xFDF
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function ___lwmod *****************
  2189 ;; Defined at:
  2190 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwmod.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  dividend        2   14[COMRAM] unsigned int 
  2193 ;;  divisor         2   16[COMRAM] unsigned int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  counter         1   18[COMRAM] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  2   14[COMRAM] unsigned int 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2205 ;;      Params:         4       0       0       0       0       0       0
  2206 ;;      Locals:         1       0       0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0
  2208 ;;      Totals:         5       0       0       0       0       0       0
  2209 ;;Total ram usage:        5 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_read_from_eeprom
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text15
  2220  000AEE                     __ptext15:
  2221                           	opt stack 0
  2222  000AEE                     ___lwmod:
  2223                           	opt stack 27
  2224                           
  2225                           ;incstack = 0
  2226  000AEE  5011               	movf	___lwmod@divisor,w,c
  2227  000AF0  1012               	iorwf	___lwmod@divisor+1,w,c
  2228  000AF2  B4D8               	btfsc	status,2,c
  2229  000AF4  D018               	goto	l636
  2230  000AF6  0E01               	movlw	1
  2231  000AF8  6E13               	movwf	___lwmod@counter,c
  2232  000AFA  D004               	goto	l1323
  2233  000AFC                     l1321:
  2234  000AFC  90D8               	bcf	status,0,c
  2235  000AFE  3611               	rlcf	___lwmod@divisor,f,c
  2236  000B00  3612               	rlcf	___lwmod@divisor+1,f,c
  2237  000B02  2A13               	incf	___lwmod@counter,f,c
  2238  000B04                     l1323:
  2239  000B04  AE12               	btfss	___lwmod@divisor+1,7,c
  2240  000B06  D7FA               	goto	l1321
  2241  000B08                     l1325:
  2242  000B08  5011               	movf	___lwmod@divisor,w,c
  2243  000B0A  5C0F               	subwf	___lwmod@dividend,w,c
  2244  000B0C  5012               	movf	___lwmod@divisor+1,w,c
  2245  000B0E  5810               	subwfb	___lwmod@dividend+1,w,c
  2246  000B10  A0D8               	btfss	status,0,c
  2247  000B12  D004               	goto	l1329
  2248  000B14  5011               	movf	___lwmod@divisor,w,c
  2249  000B16  5E0F               	subwf	___lwmod@dividend,f,c
  2250  000B18  5012               	movf	___lwmod@divisor+1,w,c
  2251  000B1A  5A10               	subwfb	___lwmod@dividend+1,f,c
  2252  000B1C                     l1329:
  2253  000B1C  90D8               	bcf	status,0,c
  2254  000B1E  3212               	rrcf	___lwmod@divisor+1,f,c
  2255  000B20  3211               	rrcf	___lwmod@divisor,f,c
  2256  000B22  2E13               	decfsz	___lwmod@counter,f,c
  2257  000B24  D7F1               	goto	l1325
  2258  000B26                     l636:
  2259  000B26  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  2260  000B2A  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  2261  000B2E  0012               	return		;funcret
  2262  000B30                     __end_of___lwmod:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           prodl	equ	0xFF3
  2269                           intcon	equ	0xFF2
  2270                           intcon2	equ	0xFF1
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           postdec1	equ	0xFE5
  2274                           fsr1l	equ	0xFE1
  2275                           indf2	equ	0xFDF
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _clcd_write *****************
  2281 ;; Defined at:
  2282 ;;		line 3 in file "clcd.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  byte            1    wreg     unsigned char 
  2285 ;;  control_bit     1   14[COMRAM] unsigned char 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  byte            1   15[COMRAM] unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2297 ;;      Params:         1       0       0       0       0       0       0
  2298 ;;      Locals:         1       0       0       0       0       0       0
  2299 ;;      Temps:          0       0       0       0       0       0       0
  2300 ;;      Totals:         2       0       0       0       0       0       0
  2301 ;;Total ram usage:        2 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    1
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_init_clcd
  2308 ;;		_clcd_print
  2309 ;;		_clcd_putch
  2310 ;;		_check_matrix_keypad
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text16
  2315  000BA0                     __ptext16:
  2316                           	opt stack 0
  2317  000BA0                     _clcd_write:
  2318                           	opt stack 27
  2319                           
  2320                           ;incstack = 0
  2321                           ;clcd_write@byte stored from wreg
  2322  000BA0  6E10               	movwf	clcd_write@byte,c
  2323                           
  2324                           ;clcd.c: 5: PORTCbits.RC1 = control_bit;
  2325  000BA2  B00F               	btfsc	clcd_write@control_bit,0,c
  2326  000BA4  D002               	bra	u615
  2327  000BA6  9282               	bcf	3970,1,c	;volatile
  2328  000BA8  D001               	bra	u616
  2329  000BAA                     u615:
  2330  000BAA  8282               	bsf	3970,1,c	;volatile
  2331  000BAC                     u616:
  2332                           
  2333                           ;clcd.c: 6: PORTD = byte;
  2334  000BAC  C010  FF83         	movff	clcd_write@byte,3971	;volatile
  2335                           
  2336                           ;clcd.c: 9: PORTCbits.RC2 = 1;
  2337  000BB0  8482               	bsf	3970,2,c	;volatile
  2338                           
  2339                           ;clcd.c: 10: PORTCbits.RC2 = 0;
  2340  000BB2  9482               	bcf	3970,2,c	;volatile
  2341                           
  2342                           ;clcd.c: 12: TRISD7 = 0xFF;
  2343  000BB4  8E95               	bsf	3989,7,c	;volatile
  2344                           
  2345                           ;clcd.c: 13: PORTCbits.RC0 = 1;
  2346  000BB6  8082               	bsf	3970,0,c	;volatile
  2347                           
  2348                           ;clcd.c: 14: PORTCbits.RC1 = 0;
  2349  000BB8  9282               	bcf	3970,1,c	;volatile
  2350  000BBA                     l1255:
  2351                           
  2352                           ;clcd.c: 17: {
  2353                           ;clcd.c: 18: PORTCbits.RC2 = 1;
  2354  000BBA  8482               	bsf	3970,2,c	;volatile
  2355                           
  2356                           ;clcd.c: 19: PORTCbits.RC2 = 0;
  2357  000BBC  9482               	bcf	3970,2,c	;volatile
  2358                           
  2359                           ;clcd.c: 20: } while (PORTDbits.RD7);
  2360  000BBE  BE83               	btfsc	3971,7,c	;volatile
  2361  000BC0  D7FC               	goto	l1255
  2362                           
  2363                           ;clcd.c: 22: PORTCbits.RC0 = 0;
  2364  000BC2  9082               	bcf	3970,0,c	;volatile
  2365                           
  2366                           ;clcd.c: 23: TRISD7 = 0x00;
  2367  000BC4  9E95               	bcf	3989,7,c	;volatile
  2368  000BC6  0012               	return		;funcret
  2369  000BC8                     __end_of_clcd_write:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           prodl	equ	0xFF3
  2376                           intcon	equ	0xFF2
  2377                           intcon2	equ	0xFF1
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postdec1	equ	0xFE5
  2381                           fsr1l	equ	0xFE1
  2382                           indf2	equ	0xFDF
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _isr *****************
  2388 ;; Defined at:
  2389 ;;		line 6 in file "isr.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2, status,0
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2403 ;;      Params:         0       0       0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0
  2405 ;;      Temps:         14       0       0       0       0       0       0
  2406 ;;      Totals:        14       0       0       0       0       0       0
  2407 ;;Total ram usage:       14 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		Interrupt level 2
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	intcode
  2417  000008                     __pintcode:
  2418                           	opt stack 0
  2419  000008                     _isr:
  2420                           	opt stack 27
  2421                           
  2422                           ;incstack = 0
  2423  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2424  00000A  CFFA F001          	movff	pclath,??_isr
  2425  00000E  CFFB F002          	movff	pclatu,??_isr+1
  2426  000012  ED1C  F004         	call	int_func,f	;refresh shadow registers
  2427                           pclatu	equ	0xFFB
  2428                           pclath	equ	0xFFA
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           prodl	equ	0xFF3
  2434                           intcon	equ	0xFF2
  2435                           intcon2	equ	0xFF1
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postdec1	equ	0xFE5
  2439                           fsr1l	equ	0xFE1
  2440                           indf2	equ	0xFDF
  2441                           fsr2h	equ	0xFDA
  2442                           fsr2l	equ	0xFD9
  2443                           status	equ	0xFD8
  2444                           
  2445                           	psect	intcode_body
  2446  000838                     __pintcode_body:
  2447                           	opt stack 27
  2448  000838                     int_func:
  2449                           	opt stack 27
  2450  000838  0006               	pop		; remove dummy address from shadow register refresh
  2451  00083A  CFE9 F003          	movff	fsr0l,??_isr+2
  2452  00083E  CFEA F004          	movff	fsr0h,??_isr+3
  2453  000842  CFE1 F005          	movff	fsr1l,??_isr+4
  2454  000846  CFE2 F006          	movff	fsr1h,??_isr+5
  2455  00084A  CFD9 F007          	movff	fsr2l,??_isr+6
  2456  00084E  CFDA F008          	movff	fsr2h,??_isr+7
  2457  000852  CFF3 F009          	movff	prodl,??_isr+8
  2458  000856  CFF4 F00A          	movff	prodh,??_isr+9
  2459  00085A  CFF6 F00B          	movff	tblptrl,??_isr+10
  2460  00085E  CFF7 F00C          	movff	tblptrh,??_isr+11
  2461  000862  CFF8 F00D          	movff	tblptru,??_isr+12
  2462  000866  CFF5 F00E          	movff	tablat,??_isr+13
  2463                           
  2464                           ;isr.c: 9: if (TMR0IF)
  2465  00086A  A4F2               	btfss	intcon,2,c	;volatile
  2466  00086C  D009               	goto	i2l31
  2467                           
  2468                           ;isr.c: 10: {
  2469                           ;isr.c: 12: TMR0 = TMR0 + 3038;
  2470  00086E  0EDE               	movlw	222
  2471  000870  24D6               	addwf	4054,w,c	;volatile
  2472  000872  6ED6               	movwf	4054,c	;volatile
  2473  000874  0E0B               	movlw	11
  2474  000876  20D7               	addwfc	4055,w,c	;volatile
  2475  000878  6ED7               	movwf	4055,c	;volatile
  2476                           
  2477                           ;isr.c: 14: tim_count++;
  2478  00087A  4A23               	infsnz	_tim_count,f,c
  2479  00087C  2A24               	incf	_tim_count+1,f,c
  2480                           
  2481                           ;isr.c: 16: TMR0IF = 0;
  2482  00087E  94F2               	bcf	intcon,2,c	;volatile
  2483  000880                     i2l31:
  2484  000880  C00E  FFF5         	movff	??_isr+13,tablat
  2485  000884  C00D  FFF8         	movff	??_isr+12,tblptru
  2486  000888  C00C  FFF7         	movff	??_isr+11,tblptrh
  2487  00088C  C00B  FFF6         	movff	??_isr+10,tblptrl
  2488  000890  C00A  FFF4         	movff	??_isr+9,prodh
  2489  000894  C009  FFF3         	movff	??_isr+8,prodl
  2490  000898  C008  FFDA         	movff	??_isr+7,fsr2h
  2491  00089C  C007  FFD9         	movff	??_isr+6,fsr2l
  2492  0008A0  C006  FFE2         	movff	??_isr+5,fsr1h
  2493  0008A4  C005  FFE1         	movff	??_isr+4,fsr1l
  2494  0008A8  C004  FFEA         	movff	??_isr+3,fsr0h
  2495  0008AC  C003  FFE9         	movff	??_isr+2,fsr0l
  2496  0008B0  C002  FFFB         	movff	??_isr+1,pclatu
  2497  0008B4  C001  FFFA         	movff	??_isr,pclath
  2498  0008B8  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2499  0008BA  0011               	retfie		f
  2500  0008BC                     __end_of_isr:
  2501                           	opt stack 0
  2502                           pclatu	equ	0xFFB
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           intcon2	equ	0xFF1
  2512                           postinc0	equ	0xFEE
  2513                           fsr0h	equ	0xFEA
  2514                           fsr0l	equ	0xFE9
  2515                           wreg	equ	0xFE8
  2516                           postdec1	equ	0xFE5
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           indf2	equ	0xFDF
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           pclatu	equ	0xFFB
  2524                           pclath	equ	0xFFA
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           intcon	equ	0xFF2
  2532                           intcon2	equ	0xFF1
  2533                           postinc0	equ	0xFEE
  2534                           fsr0h	equ	0xFEA
  2535                           fsr0l	equ	0xFE9
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1h	equ	0xFE2
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545                           	psect	rparam
  2546  0000                     pclatu	equ	0xFFB
  2547                           pclath	equ	0xFFA
  2548                           tblptru	equ	0xFF8
  2549                           tblptrh	equ	0xFF7
  2550                           tblptrl	equ	0xFF6
  2551                           tablat	equ	0xFF5
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           intcon	equ	0xFF2
  2555                           intcon2	equ	0xFF1
  2556                           postinc0	equ	0xFEE
  2557                           fsr0h	equ	0xFEA
  2558                           fsr0l	equ	0xFE9
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1h	equ	0xFE2
  2562                           fsr1l	equ	0xFE1
  2563                           indf2	equ	0xFDF
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568                           	psect	temp
  2569  000044                     btemp:
  2570                           	opt stack 0
  2571  000044                     	ds	1
  2572  0000                     int$flags	set	btemp
  2573                           pclatu	equ	0xFFB
  2574                           pclath	equ	0xFFA
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           intcon2	equ	0xFF1
  2583                           postinc0	equ	0xFEE
  2584                           fsr0h	equ	0xFEA
  2585                           fsr0l	equ	0xFE9
  2586                           wreg	equ	0xFE8
  2587                           postdec1	equ	0xFE5
  2588                           fsr1h	equ	0xFE2
  2589                           fsr1l	equ	0xFE1
  2590                           indf2	equ	0xFDF
  2591                           fsr2h	equ	0xFDA
  2592                           fsr2l	equ	0xFD9
  2593                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        14
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      67
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[3]), STR_2(CODE[15]), STR_1(CODE[17]), storage_str(COMRAM[11]), 
		 -> count_str(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_check_matrix_keypad
    _init_clcd->_clcd_write
    _clcd_putch->_clcd_write
    _clcd_print->_clcd_write
    _check_matrix_keypad->_write_onto_eeprom
    _write_onto_eeprom->_write_internal_eeprom
    _write_internal_eeprom->___awmod
    _read_from_eeprom->___lwmod

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5417
                                             26 COMRAM     6     6      0
                _check_matrix_keypad
                         _clcd_print
                         _clcd_putch
                        _init_config
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0     812
                          _init_clcd
                 _init_matrix_keypad
                        _init_timer0
 ---------------------------------------------------------------------------------
 (2) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0     812
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_putch                                           2     1      1     984
                                             16 COMRAM     2     1      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           3     0      3    1519
                                             16 COMRAM     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _check_matrix_keypad                                  2     2      0    1968
                                             24 COMRAM     2     2      0
                         _clcd_write
                   _read_from_eeprom
                      _read_switches
                  _write_onto_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_onto_eeprom                                    2     2      0     600
                                             22 COMRAM     2     2      0
                            ___awmod
              _write_internal_eeprom
 ---------------------------------------------------------------------------------
 (3) _write_internal_eeprom                                2     1      1     108
                                             20 COMRAM     2     1      1
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     424
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _read_switches                                        1     1      0      30
                                             14 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (3) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _read_from_eeprom                                     2     2      0     414
                                             19 COMRAM     2     2      0
                            ___lwmod
               _read_internal_eeprom
 ---------------------------------------------------------------------------------
 (3) _read_internal_eeprom                                 1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1     812
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_matrix_keypad
     _clcd_write
     _read_from_eeprom
       ___lwmod
       _read_internal_eeprom
     _read_switches
       _scan_key
     _write_onto_eeprom
       ___awmod
       _write_internal_eeprom
         ___awmod (ARG)
   _clcd_print
     _clcd_write
   _clcd_putch
     _clcd_write
   _init_config
     _init_clcd
       _clcd_write
     _init_matrix_keypad
     _init_timer0

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      43       1       71.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43       3        0.0%
DATA                 0      0      43      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Jan 31 13:13:07 2020

                   clcd_print@addr 0013                     clcd_print@data 0011  
               _init_matrix_keypad 0C20                                l110 0AAA  
                              l124 07BA                                l136 064C  
                              l217 0BE6                                l137 0644  
                              l171 08DA                                l181 0918  
                              l174 08F0                                l166 08CA  
                              l183 0920                                l175 0908  
                              l176 08F8                                l168 08E2  
                              l185 0928                                l169 08D2  
                              l178 0900                                l636 0B26  
                              l959 0930                                _GIE 007F97  
                              u615 0BAA                                u616 0BAC  
                              _PSA 007EAB                                u840 0776  
                              u930 0810                                u770 0A36  
                              u780 0A5E                                u777 0A2C  
                              u787 0A54                                _isr 0008  
                   clcd_putch@addr 0011                     clcd_putch@data 0012  
                     ___awmod@sign 0014                                wreg 000FE8  
              ?_init_matrix_keypad 0001                               l1301 096E  
                             l1321 0AFC                               l1313 099A  
                             l1305 0982                               l1401 075A  
                             l1323 0B04                               l1325 0B08  
                             l1093 0ADE                               l1309 098C  
                             l1501 0718                               l1255 0BBA  
                             l1087 0ACE                               l1431 07CE  
                             l1329 0B1C                               l1417 0798  
                             l1505 0732                               l1099 0AEA  
                             l1443 07F4                               l1365 09B6  
                             l1293 0954                               l1349 0A6E  
                             l1375 09F4                               l1439 07E4  
                             l1383 0A3E                               l1471 065A  
                             l1463 062A                               l1297 0962  
                             l1289 0948                               l1299 096A  
                             l1459 082E                               l1379 0A12  
                             l1483 06AE                               l1493 06E2  
                             l1487 06B6                               l1489 06BA  
                             l1499 070C                               ?_isr 0001  
                             STR_1 0601                               STR_2 0612  
                             STR_3 0621                               _T0CS 007EAD  
                             i2l31 0880                               _RBPU 007F8F  
                             _TMR0 000FD6                               _main 0626  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               btemp 0044  
                             pclat 000FFA                               prodh 000FF4  
                             prodl 000FF3                               start 0016  
                      _storage_str 002B               ??_init_matrix_keypad 000F  
                     ___param_bank 000010                     clcd_write@byte 0010  
           read_switches@key_state 002A                              ??_isr 0001  
                            ?_main 0001                              _EEADR 000FA9  
                  __end_of___awmod 09A4                              _T0PS0 007EA8  
                            _T0PS1 007EA9                              _T0PS2 007EAA  
                  __end_of___lwmod 0B30                       ?_init_config 0001  
                            _PORTB 000F81                              _PORTD 000F83  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                       ?_init_timer0 0001  
                            _delay 0021                _check_matrix_keypad 0738  
                            main@i 001F                              tablat 000FF5  
                            status 000FD8            ??_write_internal_eeprom 0016  
                  __initialization 0B30                       __end_of_main 0738  
             ?_check_matrix_keypad 0001                             ??_main 001B  
                    __activetblptr 000002                             _ADCON1 000FC1  
                 read_switches@key 0029                             _EEDATA 000FA8  
                           _EECON2 000FA7                             _T08BIT 007EAE  
                           _TMR0IE 007F95                             _TMR0IF 007F92  
                           _TMR0ON 007EAF                             _TRISD7 007CAF  
            ??_check_matrix_keypad 0019                          ??___awmod 0013  
                        ??___lwmod 0013                             clear_0 0B36  
                  ___awmod@divisor 0011                   __end_of_scan_key 0934  
                  ___awmod@counter 0013                       __pdataCOMRAM 0036  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
    __size_of_read_internal_eeprom 0012                         __accesstop 0060  
          __end_of__initialization 0B5C                  ?_read_from_eeprom 0001  
                    ___rparam_used 000001                 ??_read_from_eeprom 0014  
                   __pcstackCOMRAM 0001             __size_of_read_switches 0042  
check_matrix_keypad@key_level_trig 0019               __size_of_init_config 0010  
             __size_of_init_timer0 001A                 __size_of_init_clcd 0036  
                read_from_eeprom@i 0014                         _clcd_print 0A06  
                       _clcd_putch 0C08                         _clcd_write 0BA0  
                   _count_overflow 0025                  read_switches@once 0038  
                    _read_switches 0AAC        read_internal_eeprom@address 000F  
                        ?_scan_key 0001     __size_of_write_internal_eeprom 0026  
    __end_of_write_internal_eeprom 0BEE                            __Hparam 0000  
                          __Lparam 0000        __size_of_init_matrix_keypad 0012  
                          ___awmod 0934                            ___lwmod 0AEE  
                     __psmallconst 0600                            __pcinit 0B30  
                          __ramtop 0600                            __ptext0 0626  
                          __ptext1 0C44                            __ptext2 0BEE  
                          __ptext3 0C20                            __ptext4 0B6A  
                          __ptext5 0C08                            __ptext6 0A06  
                          __ptext7 0738                            __ptext8 0A66  
                          __ptext9 0BC8                            _display 0037  
                __end_of_init_clcd 0BA0                       __size_of_isr 08B4  
                 ___awmod@dividend 000F          write_internal_eeprom@data 0015  
                   ?_read_switches 0001                     __pintcode_body 0838  
             end_of_initialization 0B5C                      __Lmediumconst 0000  
                          int_func 0838                         ??_scan_key 000F  
                _write_onto_eeprom 0A66                        ?_clcd_print 0011  
                      ?_clcd_putch 0011                        ?_clcd_write 000F  
               ?_write_onto_eeprom 0001                            postdec1 000FE5  
                          postinc0 000FEE                 write_onto_eeprom@i 0017  
              ??_write_onto_eeprom 0017                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
        __end_of_write_onto_eeprom 0AAC        __end_of_check_matrix_keypad 0838  
     __end_of_read_internal_eeprom 0C44                      __pidataCOMRAM 0C54  
        __size_of_read_from_eeprom 0062                start_initialization 0B30  
                  ??_read_switches 000F                __size_of_clcd_print 0060  
              __size_of_clcd_putch 0018                __size_of_clcd_write 0028  
                     _first_change 0027                        __end_of_isr 08BC  
      read_switches@detection_type 000F                      ??_init_config 0011  
                    ??_init_timer0 000F                        __pbssCOMRAM 0021  
       __size_of_write_onto_eeprom 0046                  __size_of_scan_key 0078  
                        __pintcode 0008                           ?___awmod 000F  
                         ?___lwmod 000F                        __smallconst 0600  
                        _count_str 0039                          _init_clcd 0B6A  
              __end_of_init_config 0C54                          _read_addr 0028  
             _read_internal_eeprom 0C32                __end_of_init_timer0 0C08  
                      _eeprom_addr 0026                       ??_clcd_print 0014  
                     ??_clcd_putch 0012         __end_of_init_matrix_keypad 0C32  
                     ??_clcd_write 0010                           _PIR2bits 000FA1  
            _write_internal_eeprom 0BC8                          _tim_count 0023  
            clcd_write@control_bit 000F                   _read_from_eeprom 09A4  
               __end_of_clcd_print 0A66                 __end_of_clcd_putch 0C20  
               __end_of_clcd_write 0BC8                         ?_init_clcd 0001  
            ?_read_internal_eeprom 0001                          copy_data0 0B50  
                       _EECON1bits 000FA6                           __Hrparam 0000  
                         __Lrparam 0000   check_matrix_keypad@key_edge_trig 001A  
                 __size_of___awmod 0070                   __size_of___lwmod 0042  
                      _init_config 0C44                        _init_timer0 0BEE  
                         __ptext10 0934                           __ptext11 0AAC  
                         __ptext12 08BC                           __ptext13 09A4  
                         __ptext14 0C32                           __ptext15 0AEE  
                         __ptext16 0BA0                           _disp_num 0036  
                    __size_of_main 0112                           _scan_key 08BC  
           ?_write_internal_eeprom 0015       __size_of_check_matrix_keypad 0100  
                         int$flags 0044             ??_read_internal_eeprom 000F  
                      ??_init_clcd 0011              __end_of_read_switches 0AEE  
                         intlevel2 0000                   ___lwmod@dividend 000F  
                  ___lwmod@divisor 0011                    ___lwmod@counter 0013  
         __end_of_read_from_eeprom 0A06       write_internal_eeprom@address 0016  
